// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_maxpool2d_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        x_address2,
        x_ce2,
        x_q2,
        x_address3,
        x_ce3,
        x_q3,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        grp_fu_857_p_din0,
        grp_fu_857_p_din1,
        grp_fu_857_p_opcode,
        grp_fu_857_p_dout0,
        grp_fu_857_p_ce,
        grp_fu_861_p_din0,
        grp_fu_861_p_din1,
        grp_fu_861_p_opcode,
        grp_fu_861_p_dout0,
        grp_fu_861_p_ce,
        grp_fu_865_p_din0,
        grp_fu_865_p_din1,
        grp_fu_865_p_opcode,
        grp_fu_865_p_dout0,
        grp_fu_865_p_ce,
        grp_fu_869_p_din0,
        grp_fu_869_p_din1,
        grp_fu_869_p_opcode,
        grp_fu_869_p_dout0,
        grp_fu_869_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [11:0] x_address1;
output   x_ce1;
input  [31:0] x_q1;
output  [11:0] x_address2;
output   x_ce2;
input  [31:0] x_q2;
output  [11:0] x_address3;
output   x_ce3;
input  [31:0] x_q3;
output  [9:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
output  [31:0] grp_fu_857_p_din0;
output  [31:0] grp_fu_857_p_din1;
output  [4:0] grp_fu_857_p_opcode;
input  [0:0] grp_fu_857_p_dout0;
output   grp_fu_857_p_ce;
output  [31:0] grp_fu_861_p_din0;
output  [31:0] grp_fu_861_p_din1;
output  [4:0] grp_fu_861_p_opcode;
input  [0:0] grp_fu_861_p_dout0;
output   grp_fu_861_p_ce;
output  [31:0] grp_fu_865_p_din0;
output  [31:0] grp_fu_865_p_din1;
output  [4:0] grp_fu_865_p_opcode;
input  [0:0] grp_fu_865_p_dout0;
output   grp_fu_865_p_ce;
output  [31:0] grp_fu_869_p_din0;
output  [31:0] grp_fu_869_p_din1;
output  [4:0] grp_fu_869_p_opcode;
input  [0:0] grp_fu_869_p_dout0;
output   grp_fu_869_p_ce;

reg ap_idle;
reg x_ce0;
reg x_ce1;
reg x_ce2;
reg x_ce3;
reg y_ce0;
reg y_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln86_fu_215_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln86_reg_1283;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln86_reg_1283_pp0_iter1_reg;
wire   [0:0] icmp_ln88_fu_230_p2;
reg   [0:0] icmp_ln88_reg_1287;
reg   [0:0] icmp_ln88_reg_1287_pp0_iter1_reg;
wire   [9:0] empty_21_fu_376_p2;
reg   [9:0] empty_21_reg_1300;
wire   [7:0] empty_22_fu_382_p2;
reg   [7:0] empty_22_reg_1305;
wire   [6:0] empty_23_fu_388_p1;
reg   [6:0] empty_23_reg_1311;
wire   [7:0] p_mid129_fu_443_p2;
reg   [7:0] p_mid129_reg_1316;
wire   [9:0] p_mid151_fu_515_p2;
reg   [9:0] p_mid151_reg_1322;
wire   [6:0] empty_32_fu_521_p1;
reg   [6:0] empty_32_reg_1327;
wire   [0:0] icmp_ln90_mid282_fu_531_p2;
reg   [0:0] icmp_ln90_mid282_reg_1332;
wire   [4:0] select_ln88_fu_549_p3;
reg   [4:0] select_ln88_reg_1339;
wire   [9:0] p_mid110_fu_605_p2;
reg   [9:0] p_mid110_reg_1345;
wire   [7:0] p_mid112_fu_611_p2;
reg   [7:0] p_mid112_reg_1350;
wire   [6:0] empty_35_fu_617_p1;
reg   [6:0] empty_35_reg_1356;
wire   [9:0] add_ln102_fu_926_p2;
reg   [9:0] add_ln102_reg_1381;
reg   [9:0] add_ln102_reg_1381_pp0_iter3_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter4_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter5_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter6_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter7_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter8_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter9_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter10_reg;
reg   [9:0] add_ln102_reg_1381_pp0_iter11_reg;
reg   [31:0] x_load_reg_1386;
reg   [31:0] x_load_reg_1386_pp0_iter4_reg;
reg   [31:0] x_load_1_reg_1393;
reg   [31:0] x_load_1_reg_1393_pp0_iter4_reg;
reg   [31:0] x_load_1_reg_1393_pp0_iter5_reg;
reg   [31:0] x_load_1_reg_1393_pp0_iter6_reg;
reg   [31:0] x_load_2_reg_1400;
reg   [31:0] x_load_2_reg_1400_pp0_iter4_reg;
reg   [31:0] x_load_2_reg_1400_pp0_iter5_reg;
reg   [31:0] x_load_2_reg_1400_pp0_iter6_reg;
reg   [31:0] x_load_2_reg_1400_pp0_iter7_reg;
reg   [31:0] x_load_2_reg_1400_pp0_iter8_reg;
reg   [31:0] x_load_3_reg_1407;
reg   [31:0] x_load_3_reg_1407_pp0_iter4_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter5_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter6_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter7_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter8_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter9_reg;
reg   [31:0] x_load_3_reg_1407_pp0_iter10_reg;
wire   [31:0] select_ln98_fu_973_p3;
reg   [31:0] select_ln98_reg_1414;
reg   [31:0] select_ln98_reg_1414_pp0_iter6_reg;
wire   [31:0] select_ln98_1_fu_1062_p3;
reg   [31:0] select_ln98_1_reg_1421;
reg   [31:0] select_ln98_1_reg_1421_pp0_iter8_reg;
wire   [31:0] select_ln98_2_fu_1150_p3;
reg   [31:0] select_ln98_2_reg_1428;
reg   [31:0] select_ln98_2_reg_1428_pp0_iter10_reg;
wire   [31:0] select_ln98_3_fu_1238_p3;
reg   [31:0] select_ln98_3_reg_1435;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln98_fu_875_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln98_1_fu_886_p1;
wire   [63:0] zext_ln98_2_fu_897_p1;
wire   [63:0] zext_ln98_3_fu_908_p1;
wire   [63:0] zext_ln102_1_fu_1244_p1;
reg   [4:0] w_fu_88;
wire   [4:0] add_ln90_fu_629_p2;
wire    ap_loop_init;
reg   [4:0] h_fu_92;
wire   [4:0] select_ln88_4_fu_621_p3;
reg   [7:0] indvar_flatten_fu_96;
wire   [7:0] select_ln88_5_fu_242_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] ch_fu_100;
wire   [2:0] select_ln86_fu_536_p3;
reg   [9:0] indvar_flatten83_fu_104;
wire   [9:0] add_ln86_1_fu_221_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten83_load;
wire   [7:0] add_ln88_1_fu_236_p2;
wire   [1:0] empty_fu_266_p1;
wire   [6:0] p_shl2_fu_270_p3;
wire   [3:0] p_shl3_fu_282_p3;
wire   [7:0] p_shl2_cast_fu_278_p1;
wire   [7:0] p_shl3_cast_fu_290_p1;
wire   [5:0] p_shl_fu_300_p3;
wire   [2:0] empty_17_fu_312_p2;
wire   [6:0] p_shl_cast_fu_308_p1;
wire   [6:0] p_shl1_cast_fu_318_p1;
wire   [3:0] tmp_10_fu_332_p4;
wire   [6:0] p_cast_fu_342_p1;
wire   [6:0] empty_18_fu_322_p2;
wire   [6:0] empty_19_fu_346_p2;
wire   [5:0] empty_20_fu_352_p1;
wire   [7:0] p_shl5_fu_364_p3;
wire   [9:0] p_shl4_fu_356_p3;
wire  signed [9:0] p_shl5_cast_fu_372_p1;
wire   [7:0] zext_ln88_fu_328_p1;
wire   [7:0] empty_16_fu_294_p2;
wire   [2:0] add_ln86_fu_395_p2;
wire   [1:0] empty_29_fu_415_p1;
wire   [6:0] p_shl2_mid1_fu_419_p3;
wire   [3:0] p_shl3_mid1_fu_431_p3;
wire   [7:0] p_shl2_cast_mid1_fu_427_p1;
wire   [7:0] p_shl3_cast_mid1_fu_439_p1;
wire   [5:0] p_shl_mid1_fu_456_p3;
wire   [2:0] empty_30_fu_468_p2;
wire   [6:0] p_shl_cast_mid1_fu_464_p1;
wire   [6:0] p_shl1_cast_mid1_fu_474_p1;
wire   [6:0] p_mid131_fu_478_p2;
wire   [5:0] empty_31_fu_491_p1;
wire   [7:0] p_shl5_mid_fu_503_p3;
wire   [9:0] p_shl4_mid_fu_495_p3;
wire  signed [9:0] p_shl5_cast_mid149_fu_511_p1;
wire   [0:0] icmp_ln90_fu_525_p2;
wire   [4:0] h_mid227_fu_401_p3;
wire   [4:0] w_mid228_fu_408_p3;
wire   [4:0] add_ln88_fu_543_p2;
wire   [3:0] p_mid1_fu_561_p4;
wire   [6:0] p_cast_mid1_fu_571_p1;
wire   [6:0] p_mid232_fu_484_p3;
wire   [6:0] p_mid18_fu_575_p2;
wire   [5:0] empty_34_fu_581_p1;
wire   [7:0] p_shl5_mid1_fu_593_p3;
wire   [9:0] p_shl4_mid1_fu_585_p3;
wire  signed [9:0] p_shl5_cast_mid1_fu_601_p1;
wire   [7:0] zext_ln88_1_fu_557_p1;
wire   [7:0] p_mid230_fu_449_p3;
wire   [9:0] p_shl9_fu_657_p3;
wire   [11:0] p_shl8_fu_650_p3;
wire  signed [11:0] p_shl9_cast_fu_664_p1;
wire   [7:0] empty_25_fu_674_p2;
wire   [6:0] empty_26_fu_679_p1;
wire   [9:0] p_shl7_fu_691_p3;
wire   [11:0] p_shl6_fu_683_p3;
wire  signed [11:0] p_shl7_cast_fu_699_p1;
wire   [9:0] p_shl9_mid_fu_721_p3;
wire   [11:0] p_shl8_mid_fu_714_p3;
wire  signed [11:0] p_shl9_cast_mid163_fu_728_p1;
wire   [11:0] p_mid165_fu_732_p2;
wire   [11:0] empty_24_fu_668_p2;
wire   [7:0] p_mid167_fu_745_p2;
wire   [6:0] empty_33_fu_750_p1;
wire   [9:0] p_shl7_mid_fu_762_p3;
wire   [11:0] p_shl6_mid_fu_754_p3;
wire  signed [11:0] p_shl7_cast_mid177_fu_770_p1;
wire   [11:0] p_mid179_fu_774_p2;
wire   [11:0] empty_27_fu_703_p2;
wire   [9:0] p_mid252_fu_709_p3;
wire   [9:0] p_shl9_mid1_fu_800_p3;
wire   [11:0] p_shl8_mid1_fu_793_p3;
wire  signed [11:0] p_shl9_cast_mid1_fu_807_p1;
wire   [11:0] p_mid266_fu_738_p3;
wire   [11:0] p_mid114_fu_811_p2;
wire   [7:0] p_mid116_fu_824_p2;
wire   [6:0] empty_36_fu_829_p1;
wire   [9:0] p_shl7_mid1_fu_841_p3;
wire   [11:0] p_shl6_mid1_fu_833_p3;
wire  signed [11:0] p_shl7_cast_mid1_fu_849_p1;
wire   [11:0] p_mid280_fu_780_p3;
wire   [11:0] p_mid118_fu_853_p2;
wire   [11:0] select_ln88_2_fu_817_p3;
wire   [11:0] w_cast10_fu_866_p1;
wire   [11:0] add_ln98_fu_869_p2;
wire   [11:0] or_ln98_fu_880_p2;
wire   [11:0] select_ln88_3_fu_859_p3;
wire   [11:0] add_ln98_1_fu_891_p2;
wire   [11:0] or_ln98_1_fu_902_p2;
wire   [3:0] tmp_11_fu_913_p4;
wire   [9:0] zext_ln102_fu_922_p1;
wire   [9:0] select_ln88_1_fu_787_p3;
wire   [31:0] bitcast_ln98_fu_932_p1;
wire   [7:0] tmp_fu_935_p4;
wire   [22:0] trunc_ln98_fu_945_p1;
wire   [0:0] icmp_ln98_1_fu_955_p2;
wire   [0:0] icmp_ln98_fu_949_p2;
wire   [0:0] or_ln98_2_fu_961_p2;
wire   [0:0] and_ln98_fu_967_p2;
wire   [31:0] bitcast_ln98_1_fu_980_p1;
wire   [31:0] bitcast_ln98_2_fu_997_p1;
wire   [7:0] tmp_2_fu_983_p4;
wire   [22:0] trunc_ln98_1_fu_993_p1;
wire   [0:0] icmp_ln98_3_fu_1020_p2;
wire   [0:0] icmp_ln98_2_fu_1014_p2;
wire   [7:0] tmp_3_fu_1000_p4;
wire   [22:0] trunc_ln98_2_fu_1010_p1;
wire   [0:0] icmp_ln98_5_fu_1038_p2;
wire   [0:0] icmp_ln98_4_fu_1032_p2;
wire   [0:0] or_ln98_3_fu_1026_p2;
wire   [0:0] or_ln98_4_fu_1044_p2;
wire   [0:0] and_ln98_1_fu_1050_p2;
wire   [0:0] and_ln98_2_fu_1056_p2;
wire   [31:0] bitcast_ln98_3_fu_1068_p1;
wire   [31:0] bitcast_ln98_4_fu_1085_p1;
wire   [7:0] tmp_5_fu_1071_p4;
wire   [22:0] trunc_ln98_3_fu_1081_p1;
wire   [0:0] icmp_ln98_7_fu_1108_p2;
wire   [0:0] icmp_ln98_6_fu_1102_p2;
wire   [7:0] tmp_6_fu_1088_p4;
wire   [22:0] trunc_ln98_4_fu_1098_p1;
wire   [0:0] icmp_ln98_9_fu_1126_p2;
wire   [0:0] icmp_ln98_8_fu_1120_p2;
wire   [0:0] or_ln98_5_fu_1114_p2;
wire   [0:0] or_ln98_6_fu_1132_p2;
wire   [0:0] and_ln98_3_fu_1138_p2;
wire   [0:0] and_ln98_4_fu_1144_p2;
wire   [31:0] bitcast_ln98_5_fu_1156_p1;
wire   [31:0] bitcast_ln98_6_fu_1173_p1;
wire   [7:0] tmp_8_fu_1159_p4;
wire   [22:0] trunc_ln98_5_fu_1169_p1;
wire   [0:0] icmp_ln98_11_fu_1196_p2;
wire   [0:0] icmp_ln98_10_fu_1190_p2;
wire   [7:0] tmp_9_fu_1176_p4;
wire   [22:0] trunc_ln98_6_fu_1186_p1;
wire   [0:0] icmp_ln98_13_fu_1214_p2;
wire   [0:0] icmp_ln98_12_fu_1208_p2;
wire   [0:0] or_ln98_7_fu_1202_p2;
wire   [0:0] or_ln98_8_fu_1220_p2;
wire   [0:0] and_ln98_5_fu_1226_p2;
wire   [0:0] and_ln98_6_fu_1232_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ch_fu_100 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln86_reg_1283 == 1'd0))) begin
            ch_fu_100 <= select_ln86_fu_536_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            h_fu_92 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln86_reg_1283 == 1'd0))) begin
            h_fu_92 <= select_ln88_4_fu_621_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_215_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten83_fu_104 <= add_ln86_1_fu_221_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten83_fu_104 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln86_fu_215_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_96 <= select_ln88_5_fu_242_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            w_fu_88 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln86_reg_1283 == 1'd0))) begin
            w_fu_88 <= add_ln90_fu_629_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln86_reg_1283_pp0_iter1_reg == 1'd0))) begin
        add_ln102_reg_1381 <= add_ln102_fu_926_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln102_reg_1381_pp0_iter10_reg <= add_ln102_reg_1381_pp0_iter9_reg;
        add_ln102_reg_1381_pp0_iter11_reg <= add_ln102_reg_1381_pp0_iter10_reg;
        add_ln102_reg_1381_pp0_iter3_reg <= add_ln102_reg_1381;
        add_ln102_reg_1381_pp0_iter4_reg <= add_ln102_reg_1381_pp0_iter3_reg;
        add_ln102_reg_1381_pp0_iter5_reg <= add_ln102_reg_1381_pp0_iter4_reg;
        add_ln102_reg_1381_pp0_iter6_reg <= add_ln102_reg_1381_pp0_iter5_reg;
        add_ln102_reg_1381_pp0_iter7_reg <= add_ln102_reg_1381_pp0_iter6_reg;
        add_ln102_reg_1381_pp0_iter8_reg <= add_ln102_reg_1381_pp0_iter7_reg;
        add_ln102_reg_1381_pp0_iter9_reg <= add_ln102_reg_1381_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        select_ln98_1_reg_1421 <= select_ln98_1_fu_1062_p3;
        select_ln98_1_reg_1421_pp0_iter8_reg <= select_ln98_1_reg_1421;
        select_ln98_2_reg_1428 <= select_ln98_2_fu_1150_p3;
        select_ln98_2_reg_1428_pp0_iter10_reg <= select_ln98_2_reg_1428;
        select_ln98_3_reg_1435 <= select_ln98_3_fu_1238_p3;
        select_ln98_reg_1414 <= select_ln98_fu_973_p3;
        select_ln98_reg_1414_pp0_iter6_reg <= select_ln98_reg_1414;
        x_load_1_reg_1393_pp0_iter4_reg <= x_load_1_reg_1393;
        x_load_1_reg_1393_pp0_iter5_reg <= x_load_1_reg_1393_pp0_iter4_reg;
        x_load_1_reg_1393_pp0_iter6_reg <= x_load_1_reg_1393_pp0_iter5_reg;
        x_load_2_reg_1400_pp0_iter4_reg <= x_load_2_reg_1400;
        x_load_2_reg_1400_pp0_iter5_reg <= x_load_2_reg_1400_pp0_iter4_reg;
        x_load_2_reg_1400_pp0_iter6_reg <= x_load_2_reg_1400_pp0_iter5_reg;
        x_load_2_reg_1400_pp0_iter7_reg <= x_load_2_reg_1400_pp0_iter6_reg;
        x_load_2_reg_1400_pp0_iter8_reg <= x_load_2_reg_1400_pp0_iter7_reg;
        x_load_3_reg_1407_pp0_iter10_reg <= x_load_3_reg_1407_pp0_iter9_reg;
        x_load_3_reg_1407_pp0_iter4_reg <= x_load_3_reg_1407;
        x_load_3_reg_1407_pp0_iter5_reg <= x_load_3_reg_1407_pp0_iter4_reg;
        x_load_3_reg_1407_pp0_iter6_reg <= x_load_3_reg_1407_pp0_iter5_reg;
        x_load_3_reg_1407_pp0_iter7_reg <= x_load_3_reg_1407_pp0_iter6_reg;
        x_load_3_reg_1407_pp0_iter8_reg <= x_load_3_reg_1407_pp0_iter7_reg;
        x_load_3_reg_1407_pp0_iter9_reg <= x_load_3_reg_1407_pp0_iter8_reg;
        x_load_reg_1386_pp0_iter4_reg <= x_load_reg_1386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_22_reg_1305 <= empty_22_fu_382_p2;
        icmp_ln86_reg_1283 <= icmp_ln86_fu_215_p2;
        icmp_ln86_reg_1283_pp0_iter1_reg <= icmp_ln86_reg_1283;
        icmp_ln88_reg_1287_pp0_iter1_reg <= icmp_ln88_reg_1287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_1287 == 1'd0))) begin
        empty_21_reg_1300[9 : 1] <= empty_21_fu_376_p2[9 : 1];
        empty_23_reg_1311 <= empty_23_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_reg_1287 == 1'd1) & (icmp_ln86_reg_1283 == 1'd0))) begin
        empty_32_reg_1327[6 : 2] <= empty_32_fu_521_p1[6 : 2];
        p_mid151_reg_1322[9 : 2] <= p_mid151_fu_515_p2[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_reg_1283 == 1'd0))) begin
        empty_35_reg_1356 <= empty_35_fu_617_p1;
        icmp_ln90_mid282_reg_1332 <= icmp_ln90_mid282_fu_531_p2;
        p_mid110_reg_1345[9 : 1] <= p_mid110_fu_605_p2[9 : 1];
        p_mid112_reg_1350 <= p_mid112_fu_611_p2;
        p_mid129_reg_1316[7 : 2] <= p_mid129_fu_443_p2[7 : 2];
        select_ln88_reg_1339 <= select_ln88_fu_549_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_215_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln88_reg_1287 <= icmp_ln88_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        x_load_1_reg_1393 <= x_q2;
        x_load_2_reg_1400 <= x_q1;
        x_load_3_reg_1407 <= x_q0;
        x_load_reg_1386 <= x_q3;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_215_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln86_reg_1283_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten83_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten83_load = indvar_flatten83_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_ce2 = 1'b1;
    end else begin
        x_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_ce3 = 1'b1;
    end else begin
        x_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_926_p2 = (zext_ln102_fu_922_p1 + select_ln88_1_fu_787_p3);

assign add_ln86_1_fu_221_p2 = (ap_sig_allocacmp_indvar_flatten83_load + 10'd1);

assign add_ln86_fu_395_p2 = (ch_fu_100 + 3'd1);

assign add_ln88_1_fu_236_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln88_fu_543_p2 = (h_mid227_fu_401_p3 + 5'd2);

assign add_ln90_fu_629_p2 = (select_ln88_fu_549_p3 + 5'd2);

assign add_ln98_1_fu_891_p2 = (select_ln88_3_fu_859_p3 + w_cast10_fu_866_p1);

assign add_ln98_fu_869_p2 = (select_ln88_2_fu_817_p3 + w_cast10_fu_866_p1);

assign and_ln98_1_fu_1050_p2 = (or_ln98_4_fu_1044_p2 & or_ln98_3_fu_1026_p2);

assign and_ln98_2_fu_1056_p2 = (grp_fu_861_p_dout0 & and_ln98_1_fu_1050_p2);

assign and_ln98_3_fu_1138_p2 = (or_ln98_6_fu_1132_p2 & or_ln98_5_fu_1114_p2);

assign and_ln98_4_fu_1144_p2 = (grp_fu_865_p_dout0 & and_ln98_3_fu_1138_p2);

assign and_ln98_5_fu_1226_p2 = (or_ln98_8_fu_1220_p2 & or_ln98_7_fu_1202_p2);

assign and_ln98_6_fu_1232_p2 = (grp_fu_869_p_dout0 & and_ln98_5_fu_1226_p2);

assign and_ln98_fu_967_p2 = (or_ln98_2_fu_961_p2 & grp_fu_857_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln98_1_fu_980_p1 = select_ln98_reg_1414_pp0_iter6_reg;

assign bitcast_ln98_2_fu_997_p1 = x_load_1_reg_1393_pp0_iter6_reg;

assign bitcast_ln98_3_fu_1068_p1 = select_ln98_1_reg_1421_pp0_iter8_reg;

assign bitcast_ln98_4_fu_1085_p1 = x_load_2_reg_1400_pp0_iter8_reg;

assign bitcast_ln98_5_fu_1156_p1 = select_ln98_2_reg_1428_pp0_iter10_reg;

assign bitcast_ln98_6_fu_1173_p1 = x_load_3_reg_1407_pp0_iter10_reg;

assign bitcast_ln98_fu_932_p1 = x_load_reg_1386_pp0_iter4_reg;

assign empty_16_fu_294_p2 = (p_shl2_cast_fu_278_p1 - p_shl3_cast_fu_290_p1);

assign empty_17_fu_312_p2 = ch_fu_100 << 3'd1;

assign empty_18_fu_322_p2 = (p_shl_cast_fu_308_p1 - p_shl1_cast_fu_318_p1);

assign empty_19_fu_346_p2 = (p_cast_fu_342_p1 + empty_18_fu_322_p2);

assign empty_20_fu_352_p1 = empty_19_fu_346_p2[5:0];

assign empty_21_fu_376_p2 = ($signed(p_shl4_fu_356_p3) - $signed(p_shl5_cast_fu_372_p1));

assign empty_22_fu_382_p2 = (zext_ln88_fu_328_p1 + empty_16_fu_294_p2);

assign empty_23_fu_388_p1 = empty_22_fu_382_p2[6:0];

assign empty_24_fu_668_p2 = ($signed(p_shl8_fu_650_p3) - $signed(p_shl9_cast_fu_664_p1));

assign empty_25_fu_674_p2 = (empty_22_reg_1305 | 8'd1);

assign empty_26_fu_679_p1 = empty_25_fu_674_p2[6:0];

assign empty_27_fu_703_p2 = ($signed(p_shl6_fu_683_p3) - $signed(p_shl7_cast_fu_699_p1));

assign empty_29_fu_415_p1 = add_ln86_fu_395_p2[1:0];

assign empty_30_fu_468_p2 = add_ln86_fu_395_p2 << 3'd1;

assign empty_31_fu_491_p1 = p_mid131_fu_478_p2[5:0];

assign empty_32_fu_521_p1 = p_mid129_fu_443_p2[6:0];

assign empty_33_fu_750_p1 = p_mid167_fu_745_p2[6:0];

assign empty_34_fu_581_p1 = p_mid18_fu_575_p2[5:0];

assign empty_35_fu_617_p1 = p_mid112_fu_611_p2[6:0];

assign empty_36_fu_829_p1 = p_mid116_fu_824_p2[6:0];

assign empty_fu_266_p1 = ch_fu_100[1:0];

assign grp_fu_857_p_ce = 1'b1;

assign grp_fu_857_p_din0 = x_load_reg_1386;

assign grp_fu_857_p_din1 = 32'd4286578687;

assign grp_fu_857_p_opcode = 5'd4;

assign grp_fu_861_p_ce = 1'b1;

assign grp_fu_861_p_din0 = select_ln98_reg_1414;

assign grp_fu_861_p_din1 = x_load_1_reg_1393_pp0_iter5_reg;

assign grp_fu_861_p_opcode = 5'd2;

assign grp_fu_865_p_ce = 1'b1;

assign grp_fu_865_p_din0 = select_ln98_1_reg_1421;

assign grp_fu_865_p_din1 = x_load_2_reg_1400_pp0_iter7_reg;

assign grp_fu_865_p_opcode = 5'd2;

assign grp_fu_869_p_ce = 1'b1;

assign grp_fu_869_p_din0 = select_ln98_2_reg_1428;

assign grp_fu_869_p_din1 = x_load_3_reg_1407_pp0_iter9_reg;

assign grp_fu_869_p_opcode = 5'd2;

assign h_mid227_fu_401_p3 = ((icmp_ln88_reg_1287[0:0] == 1'b1) ? 5'd0 : h_fu_92);

assign icmp_ln86_fu_215_p2 = ((ap_sig_allocacmp_indvar_flatten83_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_230_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_525_p2 = ((w_fu_88 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln90_mid282_fu_531_p2 = (icmp_ln90_fu_525_p2 | icmp_ln88_reg_1287);

assign icmp_ln98_10_fu_1190_p2 = ((tmp_8_fu_1159_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_11_fu_1196_p2 = ((trunc_ln98_5_fu_1169_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_12_fu_1208_p2 = ((tmp_9_fu_1176_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_13_fu_1214_p2 = ((trunc_ln98_6_fu_1186_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_955_p2 = ((trunc_ln98_fu_945_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_2_fu_1014_p2 = ((tmp_2_fu_983_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_3_fu_1020_p2 = ((trunc_ln98_1_fu_993_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_4_fu_1032_p2 = ((tmp_3_fu_1000_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_5_fu_1038_p2 = ((trunc_ln98_2_fu_1010_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_6_fu_1102_p2 = ((tmp_5_fu_1071_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_7_fu_1108_p2 = ((trunc_ln98_3_fu_1081_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_8_fu_1120_p2 = ((tmp_6_fu_1088_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln98_9_fu_1126_p2 = ((trunc_ln98_4_fu_1098_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_949_p2 = ((tmp_fu_935_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln98_1_fu_902_p2 = (12'd1 | add_ln98_1_fu_891_p2);

assign or_ln98_2_fu_961_p2 = (icmp_ln98_fu_949_p2 | icmp_ln98_1_fu_955_p2);

assign or_ln98_3_fu_1026_p2 = (icmp_ln98_3_fu_1020_p2 | icmp_ln98_2_fu_1014_p2);

assign or_ln98_4_fu_1044_p2 = (icmp_ln98_5_fu_1038_p2 | icmp_ln98_4_fu_1032_p2);

assign or_ln98_5_fu_1114_p2 = (icmp_ln98_7_fu_1108_p2 | icmp_ln98_6_fu_1102_p2);

assign or_ln98_6_fu_1132_p2 = (icmp_ln98_9_fu_1126_p2 | icmp_ln98_8_fu_1120_p2);

assign or_ln98_7_fu_1202_p2 = (icmp_ln98_11_fu_1196_p2 | icmp_ln98_10_fu_1190_p2);

assign or_ln98_8_fu_1220_p2 = (icmp_ln98_13_fu_1214_p2 | icmp_ln98_12_fu_1208_p2);

assign or_ln98_fu_880_p2 = (12'd1 | add_ln98_fu_869_p2);

assign p_cast_fu_342_p1 = tmp_10_fu_332_p4;

assign p_cast_mid1_fu_571_p1 = p_mid1_fu_561_p4;

assign p_mid110_fu_605_p2 = ($signed(p_shl4_mid1_fu_585_p3) - $signed(p_shl5_cast_mid1_fu_601_p1));

assign p_mid112_fu_611_p2 = (zext_ln88_1_fu_557_p1 + p_mid230_fu_449_p3);

assign p_mid114_fu_811_p2 = ($signed(p_shl8_mid1_fu_793_p3) - $signed(p_shl9_cast_mid1_fu_807_p1));

assign p_mid116_fu_824_p2 = (p_mid112_reg_1350 | 8'd1);

assign p_mid118_fu_853_p2 = ($signed(p_shl6_mid1_fu_833_p3) - $signed(p_shl7_cast_mid1_fu_849_p1));

assign p_mid129_fu_443_p2 = (p_shl2_cast_mid1_fu_427_p1 - p_shl3_cast_mid1_fu_439_p1);

assign p_mid131_fu_478_p2 = (p_shl_cast_mid1_fu_464_p1 - p_shl1_cast_mid1_fu_474_p1);

assign p_mid151_fu_515_p2 = ($signed(p_shl4_mid_fu_495_p3) - $signed(p_shl5_cast_mid149_fu_511_p1));

assign p_mid165_fu_732_p2 = ($signed(p_shl8_mid_fu_714_p3) - $signed(p_shl9_cast_mid163_fu_728_p1));

assign p_mid167_fu_745_p2 = (p_mid129_reg_1316 | 8'd1);

assign p_mid179_fu_774_p2 = ($signed(p_shl6_mid_fu_754_p3) - $signed(p_shl7_cast_mid177_fu_770_p1));

assign p_mid18_fu_575_p2 = (p_cast_mid1_fu_571_p1 + p_mid232_fu_484_p3);

assign p_mid1_fu_561_p4 = {{add_ln88_fu_543_p2[4:1]}};

assign p_mid230_fu_449_p3 = ((icmp_ln88_reg_1287[0:0] == 1'b1) ? p_mid129_fu_443_p2 : empty_16_fu_294_p2);

assign p_mid232_fu_484_p3 = ((icmp_ln88_reg_1287[0:0] == 1'b1) ? p_mid131_fu_478_p2 : empty_18_fu_322_p2);

assign p_mid252_fu_709_p3 = ((icmp_ln88_reg_1287_pp0_iter1_reg[0:0] == 1'b1) ? p_mid151_reg_1322 : empty_21_reg_1300);

assign p_mid266_fu_738_p3 = ((icmp_ln88_reg_1287_pp0_iter1_reg[0:0] == 1'b1) ? p_mid165_fu_732_p2 : empty_24_fu_668_p2);

assign p_mid280_fu_780_p3 = ((icmp_ln88_reg_1287_pp0_iter1_reg[0:0] == 1'b1) ? p_mid179_fu_774_p2 : empty_27_fu_703_p2);

assign p_shl1_cast_fu_318_p1 = empty_17_fu_312_p2;

assign p_shl1_cast_mid1_fu_474_p1 = empty_30_fu_468_p2;

assign p_shl2_cast_fu_278_p1 = p_shl2_fu_270_p3;

assign p_shl2_cast_mid1_fu_427_p1 = p_shl2_mid1_fu_419_p3;

assign p_shl2_fu_270_p3 = {{empty_fu_266_p1}, {5'd0}};

assign p_shl2_mid1_fu_419_p3 = {{empty_29_fu_415_p1}, {5'd0}};

assign p_shl3_cast_fu_290_p1 = p_shl3_fu_282_p3;

assign p_shl3_cast_mid1_fu_439_p1 = p_shl3_mid1_fu_431_p3;

assign p_shl3_fu_282_p3 = {{empty_fu_266_p1}, {2'd0}};

assign p_shl3_mid1_fu_431_p3 = {{empty_29_fu_415_p1}, {2'd0}};

assign p_shl4_fu_356_p3 = {{empty_20_fu_352_p1}, {4'd0}};

assign p_shl4_mid1_fu_585_p3 = {{empty_34_fu_581_p1}, {4'd0}};

assign p_shl4_mid_fu_495_p3 = {{empty_31_fu_491_p1}, {4'd0}};

assign p_shl5_cast_fu_372_p1 = $signed(p_shl5_fu_364_p3);

assign p_shl5_cast_mid149_fu_511_p1 = $signed(p_shl5_mid_fu_503_p3);

assign p_shl5_cast_mid1_fu_601_p1 = $signed(p_shl5_mid1_fu_593_p3);

assign p_shl5_fu_364_p3 = {{empty_19_fu_346_p2}, {1'd0}};

assign p_shl5_mid1_fu_593_p3 = {{p_mid18_fu_575_p2}, {1'd0}};

assign p_shl5_mid_fu_503_p3 = {{p_mid131_fu_478_p2}, {1'd0}};

assign p_shl6_fu_683_p3 = {{empty_26_fu_679_p1}, {5'd0}};

assign p_shl6_mid1_fu_833_p3 = {{empty_36_fu_829_p1}, {5'd0}};

assign p_shl6_mid_fu_754_p3 = {{empty_33_fu_750_p1}, {5'd0}};

assign p_shl7_cast_fu_699_p1 = $signed(p_shl7_fu_691_p3);

assign p_shl7_cast_mid177_fu_770_p1 = $signed(p_shl7_mid_fu_762_p3);

assign p_shl7_cast_mid1_fu_849_p1 = $signed(p_shl7_mid1_fu_841_p3);

assign p_shl7_fu_691_p3 = {{empty_25_fu_674_p2}, {2'd0}};

assign p_shl7_mid1_fu_841_p3 = {{p_mid116_fu_824_p2}, {2'd0}};

assign p_shl7_mid_fu_762_p3 = {{p_mid167_fu_745_p2}, {2'd0}};

assign p_shl8_fu_650_p3 = {{empty_23_reg_1311}, {5'd0}};

assign p_shl8_mid1_fu_793_p3 = {{empty_35_reg_1356}, {5'd0}};

assign p_shl8_mid_fu_714_p3 = {{empty_32_reg_1327}, {5'd0}};

assign p_shl9_cast_fu_664_p1 = $signed(p_shl9_fu_657_p3);

assign p_shl9_cast_mid163_fu_728_p1 = $signed(p_shl9_mid_fu_721_p3);

assign p_shl9_cast_mid1_fu_807_p1 = $signed(p_shl9_mid1_fu_800_p3);

assign p_shl9_fu_657_p3 = {{empty_22_reg_1305}, {2'd0}};

assign p_shl9_mid1_fu_800_p3 = {{p_mid112_reg_1350}, {2'd0}};

assign p_shl9_mid_fu_721_p3 = {{p_mid129_reg_1316}, {2'd0}};

assign p_shl_cast_fu_308_p1 = p_shl_fu_300_p3;

assign p_shl_cast_mid1_fu_464_p1 = p_shl_mid1_fu_456_p3;

assign p_shl_fu_300_p3 = {{empty_fu_266_p1}, {4'd0}};

assign p_shl_mid1_fu_456_p3 = {{empty_29_fu_415_p1}, {4'd0}};

assign select_ln86_fu_536_p3 = ((icmp_ln88_reg_1287[0:0] == 1'b1) ? add_ln86_fu_395_p2 : ch_fu_100);

assign select_ln88_1_fu_787_p3 = ((icmp_ln90_mid282_reg_1332[0:0] == 1'b1) ? p_mid252_fu_709_p3 : p_mid110_reg_1345);

assign select_ln88_2_fu_817_p3 = ((icmp_ln90_mid282_reg_1332[0:0] == 1'b1) ? p_mid266_fu_738_p3 : p_mid114_fu_811_p2);

assign select_ln88_3_fu_859_p3 = ((icmp_ln90_mid282_reg_1332[0:0] == 1'b1) ? p_mid280_fu_780_p3 : p_mid118_fu_853_p2);

assign select_ln88_4_fu_621_p3 = ((icmp_ln90_mid282_fu_531_p2[0:0] == 1'b1) ? h_mid227_fu_401_p3 : add_ln88_fu_543_p2);

assign select_ln88_5_fu_242_p3 = ((icmp_ln88_fu_230_p2[0:0] == 1'b1) ? 8'd1 : add_ln88_1_fu_236_p2);

assign select_ln88_fu_549_p3 = ((icmp_ln90_mid282_fu_531_p2[0:0] == 1'b1) ? w_mid228_fu_408_p3 : 5'd0);

assign select_ln98_1_fu_1062_p3 = ((and_ln98_2_fu_1056_p2[0:0] == 1'b1) ? select_ln98_reg_1414_pp0_iter6_reg : x_load_1_reg_1393_pp0_iter6_reg);

assign select_ln98_2_fu_1150_p3 = ((and_ln98_4_fu_1144_p2[0:0] == 1'b1) ? select_ln98_1_reg_1421_pp0_iter8_reg : x_load_2_reg_1400_pp0_iter8_reg);

assign select_ln98_3_fu_1238_p3 = ((and_ln98_6_fu_1232_p2[0:0] == 1'b1) ? select_ln98_2_reg_1428_pp0_iter10_reg : x_load_3_reg_1407_pp0_iter10_reg);

assign select_ln98_fu_973_p3 = ((and_ln98_fu_967_p2[0:0] == 1'b1) ? 32'd4286578687 : x_load_reg_1386_pp0_iter4_reg);

assign tmp_10_fu_332_p4 = {{h_fu_92[4:1]}};

assign tmp_11_fu_913_p4 = {{select_ln88_reg_1339[4:1]}};

assign tmp_2_fu_983_p4 = {{bitcast_ln98_1_fu_980_p1[30:23]}};

assign tmp_3_fu_1000_p4 = {{bitcast_ln98_2_fu_997_p1[30:23]}};

assign tmp_5_fu_1071_p4 = {{bitcast_ln98_3_fu_1068_p1[30:23]}};

assign tmp_6_fu_1088_p4 = {{bitcast_ln98_4_fu_1085_p1[30:23]}};

assign tmp_8_fu_1159_p4 = {{bitcast_ln98_5_fu_1156_p1[30:23]}};

assign tmp_9_fu_1176_p4 = {{bitcast_ln98_6_fu_1173_p1[30:23]}};

assign tmp_fu_935_p4 = {{bitcast_ln98_fu_932_p1[30:23]}};

assign trunc_ln98_1_fu_993_p1 = bitcast_ln98_1_fu_980_p1[22:0];

assign trunc_ln98_2_fu_1010_p1 = bitcast_ln98_2_fu_997_p1[22:0];

assign trunc_ln98_3_fu_1081_p1 = bitcast_ln98_3_fu_1068_p1[22:0];

assign trunc_ln98_4_fu_1098_p1 = bitcast_ln98_4_fu_1085_p1[22:0];

assign trunc_ln98_5_fu_1169_p1 = bitcast_ln98_5_fu_1156_p1[22:0];

assign trunc_ln98_6_fu_1186_p1 = bitcast_ln98_6_fu_1173_p1[22:0];

assign trunc_ln98_fu_945_p1 = bitcast_ln98_fu_932_p1[22:0];

assign w_cast10_fu_866_p1 = select_ln88_reg_1339;

assign w_mid228_fu_408_p3 = ((icmp_ln88_reg_1287[0:0] == 1'b1) ? 5'd0 : w_fu_88);

assign x_address0 = zext_ln98_3_fu_908_p1;

assign x_address1 = zext_ln98_2_fu_897_p1;

assign x_address2 = zext_ln98_1_fu_886_p1;

assign x_address3 = zext_ln98_fu_875_p1;

assign y_address0 = zext_ln102_1_fu_1244_p1;

assign y_d0 = select_ln98_3_reg_1435;

assign zext_ln102_1_fu_1244_p1 = add_ln102_reg_1381_pp0_iter11_reg;

assign zext_ln102_fu_922_p1 = tmp_11_fu_913_p4;

assign zext_ln88_1_fu_557_p1 = add_ln88_fu_543_p2;

assign zext_ln88_fu_328_p1 = h_fu_92;

assign zext_ln98_1_fu_886_p1 = or_ln98_fu_880_p2;

assign zext_ln98_2_fu_897_p1 = add_ln98_1_fu_891_p2;

assign zext_ln98_3_fu_908_p1 = or_ln98_1_fu_902_p2;

assign zext_ln98_fu_875_p1 = add_ln98_fu_869_p2;

always @ (posedge ap_clk) begin
    empty_21_reg_1300[0] <= 1'b0;
    p_mid129_reg_1316[1:0] <= 2'b00;
    p_mid151_reg_1322[1:0] <= 2'b00;
    empty_32_reg_1327[1:0] <= 2'b00;
    p_mid110_reg_1345[0] <= 1'b0;
end

endmodule //cnn_top_maxpool2d_1

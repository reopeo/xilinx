// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_76_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla166_i_address0,
        vla166_i_ce0,
        vla166_i_q0,
        weight2_address0,
        weight2_ce0,
        weight2_q0,
        bias2_address0,
        bias2_ce0,
        bias2_q0,
        x_assign_address0,
        x_assign_ce0,
        x_assign_we0,
        x_assign_d0,
        grp_fu_873_p_din0,
        grp_fu_873_p_din1,
        grp_fu_873_p_opcode,
        grp_fu_873_p_dout0,
        grp_fu_873_p_ce,
        grp_fu_881_p_din0,
        grp_fu_881_p_din1,
        grp_fu_881_p_dout0,
        grp_fu_881_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] vla166_i_address0;
output   vla166_i_ce0;
input  [31:0] vla166_i_q0;
output  [13:0] weight2_address0;
output   weight2_ce0;
input  [31:0] weight2_q0;
output  [4:0] bias2_address0;
output   bias2_ce0;
input  [31:0] bias2_q0;
output  [4:0] x_assign_address0;
output   x_assign_ce0;
output   x_assign_we0;
output  [31:0] x_assign_d0;
output  [31:0] grp_fu_873_p_din0;
output  [31:0] grp_fu_873_p_din1;
output  [1:0] grp_fu_873_p_opcode;
input  [31:0] grp_fu_873_p_dout0;
output   grp_fu_873_p_ce;
output  [31:0] grp_fu_881_p_din0;
output  [31:0] grp_fu_881_p_din1;
input  [31:0] grp_fu_881_p_dout0;
output   grp_fu_881_p_ce;

reg ap_idle;
reg vla166_i_ce0;
reg weight2_ce0;
reg bias2_ce0;
reg x_assign_ce0;
reg x_assign_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln73_reg_319;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] reg_140;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ifzero_reg_380;
reg   [0:0] ifzero_reg_380_pp0_iter2_reg;
wire   [0:0] icmp_ln73_fu_169_p2;
reg   [0:0] icmp_ln73_reg_319_pp0_iter1_reg;
reg   [0:0] icmp_ln73_reg_319_pp0_iter2_reg;
wire   [13:0] add_ln73_fu_175_p2;
reg   [13:0] add_ln73_reg_323;
wire   [0:0] icmp_ln76_fu_193_p2;
reg   [0:0] icmp_ln76_reg_328;
reg   [0:0] icmp_ln76_reg_328_pp0_iter1_reg;
wire   [8:0] select_ln73_fu_199_p3;
reg   [8:0] select_ln73_reg_333;
wire   [5:0] select_ln73_2_fu_207_p3;
reg   [5:0] select_ln73_2_reg_339;
reg   [5:0] select_ln73_2_reg_339_pp0_iter1_reg;
reg   [31:0] vla166_i_load_reg_355;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] weight2_load_reg_370;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] bitcast_ln78_fu_231_p1;
wire    ap_block_pp0_stage5_11001;
wire   [0:0] ifzero_fu_240_p2;
reg   [0:0] ifzero_reg_380_pp0_iter1_reg;
wire   [31:0] select_ln73_1_fu_262_p3;
reg   [31:0] select_ln73_1_reg_384;
reg   [31:0] mul6_i_reg_389;
wire   [63:0] zext_ln73_fu_269_p1;
reg   [63:0] zext_ln73_reg_394;
reg   [63:0] zext_ln73_reg_394_pp0_iter3_reg;
reg   [31:0] bias2_load_reg_404;
wire   [31:0] bitcast_ln80_fu_273_p1;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] j_cast2_fu_219_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln78_fu_227_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage1;
reg   [31:0] sum_fu_64;
reg   [31:0] ap_sig_allocacmp_sum_load;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [8:0] j_fu_68;
wire   [8:0] j_1_fu_235_p2;
reg   [8:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_72;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten_fu_76;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] grp_fu_132_p0;
reg   [31:0] grp_fu_132_p1;
wire    ap_block_pp0_stage5;
wire   [5:0] i_1_fu_187_p2;
wire   [13:0] grp_fu_282_p3;
wire   [5:0] grp_fu_282_p0;
wire   [8:0] grp_fu_282_p1;
wire   [8:0] grp_fu_282_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage2_00001;
wire   [13:0] grp_fu_282_p00;
wire   [13:0] grp_fu_282_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_mac_muladd_6ns_9ns_9ns_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 14 ))
mac_muladd_6ns_9ns_9ns_14_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_282_p0),
    .din1(grp_fu_282_p1),
    .din2(grp_fu_282_p2),
    .ce(1'b1),
    .dout(grp_fu_282_p3)
);

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_72 <= 6'd0;
    end else if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        i_fu_72 <= select_ln73_2_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_76 <= 14'd0;
    end else if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        indvar_flatten_fu_76 <= add_ln73_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_68 <= 9'd0;
    end else if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        j_fu_68 <= j_1_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_64 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_fu_64 <= reg_140;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln73_reg_323 <= add_ln73_fu_175_p2;
        icmp_ln73_reg_319 <= icmp_ln73_fu_169_p2;
        icmp_ln73_reg_319_pp0_iter1_reg <= icmp_ln73_reg_319;
        icmp_ln73_reg_319_pp0_iter2_reg <= icmp_ln73_reg_319_pp0_iter1_reg;
        icmp_ln76_reg_328_pp0_iter1_reg <= icmp_ln76_reg_328;
        select_ln73_2_reg_339_pp0_iter1_reg <= select_ln73_2_reg_339;
        zext_ln73_reg_394[5 : 0] <= zext_ln73_fu_269_p1[5 : 0];
        zext_ln73_reg_394_pp0_iter3_reg[5 : 0] <= zext_ln73_reg_394[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ifzero_reg_380_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bias2_load_reg_404 <= bias2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_fu_169_p2 == 1'd0))) begin
        icmp_ln76_reg_328 <= icmp_ln76_fu_193_p2;
        select_ln73_2_reg_339 <= select_ln73_2_fu_207_p3;
        select_ln73_reg_333 <= select_ln73_fu_199_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ifzero_reg_380 <= ifzero_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ifzero_reg_380_pp0_iter1_reg <= ifzero_reg_380;
        ifzero_reg_380_pp0_iter2_reg <= ifzero_reg_380_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul6_i_reg_389 <= grp_fu_881_p_dout0;
        select_ln73_1_reg_384 <= select_ln73_1_fu_262_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ifzero_reg_380_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_140 <= grp_fu_873_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        vla166_i_load_reg_355 <= vla166_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_319 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        weight2_load_reg_370 <= weight2_q0;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_319 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_319_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 9'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_sum_load = reg_140;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias2_ce0 = 1'b1;
    end else begin
        bias2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_132_p0 = reg_140;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_132_p0 = select_ln73_1_reg_384;
    end else begin
        grp_fu_132_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_132_p1 = bitcast_ln80_fu_273_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_132_p1 = mul6_i_reg_389;
    end else begin
        grp_fu_132_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vla166_i_ce0 = 1'b1;
    end else begin
        vla166_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        weight2_ce0 = 1'b1;
    end else begin
        weight2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_assign_ce0 = 1'b1;
    end else begin
        x_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero_reg_380_pp0_iter2_reg == 1'd1))) begin
        x_assign_we0 = 1'b1;
    end else begin
        x_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_fu_175_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign bias2_address0 = zext_ln73_fu_269_p1;

assign bitcast_ln78_fu_231_p1 = weight2_load_reg_370;

assign bitcast_ln80_fu_273_p1 = bias2_load_reg_404;

assign grp_fu_282_p0 = grp_fu_282_p00;

assign grp_fu_282_p00 = select_ln73_2_fu_207_p3;

assign grp_fu_282_p1 = 14'd392;

assign grp_fu_282_p2 = grp_fu_282_p20;

assign grp_fu_282_p20 = select_ln73_reg_333;

assign grp_fu_873_p_ce = 1'b1;

assign grp_fu_873_p_din0 = grp_fu_132_p0;

assign grp_fu_873_p_din1 = grp_fu_132_p1;

assign grp_fu_873_p_opcode = 2'd0;

assign grp_fu_881_p_ce = 1'b1;

assign grp_fu_881_p_din0 = vla166_i_load_reg_355;

assign grp_fu_881_p_din1 = bitcast_ln78_fu_231_p1;

assign i_1_fu_187_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign icmp_ln73_fu_169_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_193_p2 = ((ap_sig_allocacmp_j_load == 9'd392) ? 1'b1 : 1'b0);

assign ifzero_fu_240_p2 = ((j_1_fu_235_p2 == 9'd392) ? 1'b1 : 1'b0);

assign j_1_fu_235_p2 = (select_ln73_reg_333 + 9'd1);

assign j_cast2_fu_219_p1 = select_ln73_fu_199_p3;

assign select_ln73_1_fu_262_p3 = ((icmp_ln76_reg_328_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_load);

assign select_ln73_2_fu_207_p3 = ((icmp_ln76_fu_193_p2[0:0] == 1'b1) ? i_1_fu_187_p2 : ap_sig_allocacmp_i_load);

assign select_ln73_fu_199_p3 = ((icmp_ln76_fu_193_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_j_load);

assign vla166_i_address0 = j_cast2_fu_219_p1;

assign weight2_address0 = zext_ln78_fu_227_p1;

assign x_assign_address0 = zext_ln73_reg_394_pp0_iter3_reg;

assign x_assign_d0 = reg_140;

assign zext_ln73_fu_269_p1 = select_ln73_2_reg_339_pp0_iter1_reg;

assign zext_ln78_fu_227_p1 = grp_fu_282_p3;

always @ (posedge ap_clk) begin
    zext_ln73_reg_394[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln73_reg_394_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_top_cnn_top_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_76_2

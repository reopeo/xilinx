-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d_conv2d,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3835,HLS_SYN_LUT=3926,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (31 downto 0);
    signal weight : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal in_channels : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channels : STD_LOGIC_VECTOR (31 downto 0);
    signal ksize : STD_LOGIC_VECTOR (31 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal y_ap_vld : STD_LOGIC;
    signal ksize_read_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channels_read_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_channels_read_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_read_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_reg_582 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias_read_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln20_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln20_2_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln23_fu_322_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln23_reg_655 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal height_cast_fu_326_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal height_cast_reg_661 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln20_1_reg_671 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln20_3_reg_676 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln27_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_408_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_reg_694 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln23_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_1_fu_416_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_1_reg_700 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln25_fu_451_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln25_reg_706 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln25_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_fu_465_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln38_reg_716 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln38_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev94_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev94_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_idle : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_ready : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out_ap_vld : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_ce : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal w_fu_94 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln27_fu_488_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_fu_98 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten42_fu_102 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln25_2_fu_430_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten67_fu_106 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln23_fu_362_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_neg_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_292_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_cast_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_cast_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_fu_315_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_1_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_379_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln23_2_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_1_fu_387_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_402_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_1_fu_424_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_448_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln27_fu_462_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal slt_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_186_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal grp_fu_257_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_269_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_269_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_281_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_281_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_conv2d_Pipeline_in_channels_kh_kw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln25 : IN STD_LOGIC_VECTOR (32 downto 0);
        sext_ln23_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cast_mid2 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul_ln20_1 : IN STD_LOGIC_VECTOR (95 downto 0);
        mul_ln20 : IN STD_LOGIC_VECTOR (63 downto 0);
        cmp31_mid122 : IN STD_LOGIC_VECTOR (0 downto 0);
        ksize : IN STD_LOGIC_VECTOR (31 downto 0);
        icmp_ln35_1 : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln38 : IN STD_LOGIC_VECTOR (32 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln23_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out_ap_vld : OUT STD_LOGIC;
        grp_fu_186_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_186_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_ce : OUT STD_LOGIC );
    end component;


    component conv2d_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv2d_mul_32ns_64ns_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component conv2d_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_channels : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_channels : OUT STD_LOGIC_VECTOR (31 downto 0);
        ksize : OUT STD_LOGIC_VECTOR (31 downto 0);
        y : IN STD_LOGIC_VECTOR (31 downto 0);
        y_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_conv2d_Pipeline_in_channels_kh_kw_fu_169 : component conv2d_conv2d_Pipeline_in_channels_kh_kw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start,
        ap_done => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done,
        ap_idle => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_idle,
        ap_ready => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_ready,
        sext_ln25 => sub_ln25_reg_706,
        sext_ln23_2 => height_read_reg_556,
        p_cast_mid2 => trunc_ln25_reg_711,
        mul_ln20_1 => mul_ln20_1_reg_671,
        mul_ln20 => mul_ln20_reg_618,
        cmp31_mid122 => rev94_reg_726,
        ksize => ksize_read_reg_538,
        icmp_ln35_1 => icmp_ln35_reg_686,
        sext_ln38 => sub_ln38_reg_716,
        trunc_ln => trunc_ln38_reg_721,
        sext_ln23_1 => width_read_reg_563,
        mul => mul_reg_630,
        sum_2_out => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out,
        sum_2_out_ap_vld => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out_ap_vld,
        grp_fu_186_p_din0 => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din0,
        grp_fu_186_p_din1 => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din1,
        grp_fu_186_p_opcode => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_opcode,
        grp_fu_186_p_dout0 => grp_fu_186_p2,
        grp_fu_186_p_ce => grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_ce);

    control_s_axi_U : component conv2d_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        x => x,
        weight => weight,
        bias => bias,
        width => width,
        height => height,
        in_channels => in_channels,
        out_channels => out_channels,
        ksize => ksize,
        y => y,
        y_ap_vld => y_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    fadd_32ns_32ns_32_5_full_dsp_1_U15 : component conv2d_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component conv2d_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);

    mul_32ns_32ns_64_2_1_U17 : component conv2d_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    mul_32ns_32ns_64_2_1_U18 : component conv2d_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    mul_32ns_64ns_96_5_1_U19 : component conv2d_mul_32ns_64ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_269_p0,
        din1 => grp_fu_269_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);

    mul_32ns_64ns_96_5_1_U20 : component conv2d_mul_32ns_64ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_281_p0,
        din1 => grp_fu_281_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_281_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_ready = ap_const_logic_1)) then 
                    grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_98 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                h_fu_98 <= select_ln25_1_reg_700;
            end if; 
        end if;
    end process;

    indvar_flatten42_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten42_fu_102 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_0))) then 
                indvar_flatten42_fu_102 <= select_ln25_2_fu_430_p3;
            end if; 
        end if;
    end process;

    indvar_flatten67_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten67_fu_106 <= ap_const_lv96_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_0))) then 
                indvar_flatten67_fu_106 <= add_ln23_fu_362_p2;
            end if; 
        end if;
    end process;

    w_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_fu_94 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_fu_94 <= add_ln27_fu_488_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bias_read_reg_587 <= bias;
                height_read_reg_556 <= height;
                in_channels_read_reg_551 <= in_channels;
                ksize_read_reg_538 <= ksize;
                out_channels_read_reg_546 <= out_channels;
                p_lshr_f_reg_582 <= ksize(31 downto 1);
                tmp_reg_577 <= ksize(31 downto 31);
                width_read_reg_563 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_reg_666 <= empty_fu_329_p1;
                height_cast_reg_661 <= height_cast_fu_326_p1;
                icmp_ln27_1_reg_681 <= icmp_ln27_1_fu_332_p2;
                icmp_ln35_reg_686 <= icmp_ln35_fu_337_p2;
                mul_ln20_1_reg_671 <= grp_fu_269_p2;
                mul_ln20_3_reg_676 <= grp_fu_281_p2;
                sext_ln23_reg_655 <= sext_ln23_fu_322_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln20_2_reg_624 <= grp_fu_257_p2;
                mul_ln20_reg_618 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_reg_630 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                rev94_reg_726 <= rev94_fu_481_p2;
                sub_ln25_reg_706 <= sub_ln25_fu_451_p2;
                sub_ln38_reg_716 <= sub_ln38_fu_465_p2;
                trunc_ln25_reg_711 <= trunc_ln25_fu_457_p1;
                trunc_ln38_reg_721 <= trunc_ln38_fu_471_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_0))) then
                select_ln25_1_reg_700 <= select_ln25_1_fu_416_p3;
                select_ln25_reg_694 <= select_ln25_fu_408_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                sum_1_reg_734 <= grp_fu_186_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, icmp_ln23_fu_357_p2, grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_362_p2 <= std_logic_vector(unsigned(indvar_flatten67_fu_106) + unsigned(ap_const_lv96_1));
    add_ln25_1_fu_424_p2 <= std_logic_vector(unsigned(indvar_flatten42_fu_102) + unsigned(ap_const_lv64_1));
    add_ln25_fu_402_p2 <= std_logic_vector(unsigned(select_ln23_fu_379_p3) + unsigned(ap_const_lv31_1));
    add_ln27_fu_488_p2 <= std_logic_vector(unsigned(select_ln25_reg_694) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done)
    begin
        if ((grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9, icmp_ln23_fu_357_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln23_fu_357_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_357_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    div_fu_315_p3 <= 
        p_neg_t_fu_306_p2 when (tmp_reg_577(0) = '1') else 
        p_lshr_f_cast_fu_312_p1;
    empty_fu_329_p1 <= bias_read_reg_587;
    grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_ap_start_reg;

    grp_fu_186_ce_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_ce, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_186_ce <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_ce;
        else 
            grp_fu_186_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out, grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din0, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_186_p0 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_186_p0 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_sum_2_out;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(empty_reg_666, grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din1, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_186_p1 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_169_grp_fu_186_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_186_p1 <= empty_reg_666;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_190_p0 <= x;
    grp_fu_190_p1 <= weight;
    grp_fu_245_p0 <= zext_ln20_fu_242_p1(32 - 1 downto 0);
    grp_fu_245_p1 <= zext_ln20_fu_242_p1(32 - 1 downto 0);
    grp_fu_257_p0 <= grp_fu_257_p00(32 - 1 downto 0);
    grp_fu_257_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_556),64));
    grp_fu_257_p1 <= grp_fu_257_p10(32 - 1 downto 0);
    grp_fu_257_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_563),64));
    grp_fu_269_p0 <= grp_fu_269_p00(32 - 1 downto 0);
    grp_fu_269_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_read_reg_551),96));
    grp_fu_269_p1 <= grp_fu_269_p10(64 - 1 downto 0);
    grp_fu_269_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln20_reg_618),96));
    grp_fu_281_p0 <= grp_fu_281_p00(32 - 1 downto 0);
    grp_fu_281_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_channels_read_reg_546),96));
    grp_fu_281_p1 <= grp_fu_281_p10(64 - 1 downto 0);
    grp_fu_281_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln20_2_reg_624),96));
        height_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height_read_reg_556),33));

    icmp_ln23_fu_357_p2 <= "1" when (indvar_flatten67_fu_106 = mul_ln20_3_reg_676) else "0";
    icmp_ln25_fu_374_p2 <= "1" when (indvar_flatten42_fu_102 = mul_ln20_2_reg_624) else "0";
    icmp_ln27_1_fu_332_p2 <= "1" when (signed(width_read_reg_563) > signed(ap_const_lv32_0)) else "0";
    icmp_ln27_fu_352_p2 <= "1" when (signed(zext_ln27_1_fu_348_p1) < signed(width_read_reg_563)) else "0";
    icmp_ln35_fu_337_p2 <= "1" when (ksize_read_reg_538 = ap_const_lv32_0) else "0";
    p_lshr_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_292_p4),32));
    p_lshr_f_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_reg_582),32));
    p_lshr_fu_292_p4 <= p_neg_fu_287_p2(31 downto 1);
    p_neg_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ksize_read_reg_538));
    p_neg_t_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_cast_fu_302_p1));
    rev94_fu_481_p2 <= (slt_fu_476_p2 xor ap_const_lv1_1);
    select_ln23_1_fu_387_p3 <= 
        ap_const_lv31_0 when (icmp_ln25_fu_374_p2(0) = '1') else 
        w_fu_94;
    select_ln23_2_fu_395_p3 <= 
        icmp_ln27_1_reg_681 when (icmp_ln25_fu_374_p2(0) = '1') else 
        icmp_ln27_fu_352_p2;
    select_ln23_fu_379_p3 <= 
        ap_const_lv31_0 when (icmp_ln25_fu_374_p2(0) = '1') else 
        h_fu_98;
    select_ln25_1_fu_416_p3 <= 
        select_ln23_fu_379_p3 when (select_ln23_2_fu_395_p3(0) = '1') else 
        add_ln25_fu_402_p2;
    select_ln25_2_fu_430_p3 <= 
        ap_const_lv64_1 when (icmp_ln25_fu_374_p2(0) = '1') else 
        add_ln25_1_fu_424_p2;
    select_ln25_fu_408_p3 <= 
        select_ln23_1_fu_387_p3 when (select_ln23_2_fu_395_p3(0) = '1') else 
        ap_const_lv31_0;
        sext_ln23_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(div_fu_315_p3),33));

    slt_fu_476_p2 <= "1" when (signed(sub_ln25_fu_451_p2) < signed(height_cast_reg_661)) else "0";
    sub_ln25_fu_451_p2 <= std_logic_vector(unsigned(zext_ln25_fu_448_p1) - unsigned(sext_ln23_reg_655));
    sub_ln38_fu_465_p2 <= std_logic_vector(unsigned(zext_ln27_fu_462_p1) - unsigned(sext_ln23_reg_655));
    trunc_ln25_fu_457_p1 <= sub_ln25_fu_451_p2(32 - 1 downto 0);
    trunc_ln38_fu_471_p1 <= sub_ln38_fu_465_p2(32 - 1 downto 0);
    y <= sum_1_reg_734;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln20_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ksize_read_reg_538),64));
    zext_ln25_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_1_reg_700),33));
    zext_ln27_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_fu_94),32));
    zext_ln27_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_694),33));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_conv2d_Pipeline_in_channels_kh_kw is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln25 : IN STD_LOGIC_VECTOR (32 downto 0);
    sext_ln23_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_cast_mid2 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln20_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    mul_ln20 : IN STD_LOGIC_VECTOR (63 downto 0);
    cmp31_mid122 : IN STD_LOGIC_VECTOR (0 downto 0);
    ksize : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln35_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln38 : IN STD_LOGIC_VECTOR (32 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln23_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_2_out_ap_vld : OUT STD_LOGIC;
    grp_fu_164_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_164_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_164_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_164_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_164_p_ce : OUT STD_LOGIC );
end;


architecture behav of conv2d_conv2d_Pipeline_in_channels_kh_kw is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln31_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln23_1_cast_fu_181_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln23_1_cast_reg_552 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln38_cast_fu_185_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln38_cast_reg_557 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln23_2_cast_fu_189_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln23_2_cast_reg_562 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln25_cast_fu_193_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln25_cast_reg_568 : STD_LOGIC_VECTOR (33 downto 0);
    signal kh_1_reg_574 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal rev23_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev23_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_load_1_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal kw_load_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_load_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln33_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_3_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_3_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln33_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_324_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln29_reg_641 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal add_ln33_fu_330_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln33_reg_646 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_mid13_fu_340_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_mid13_reg_652 : STD_LOGIC_VECTOR (33 downto 0);
    signal sum_2_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sum_1_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_427_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal kw_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kh_fu_86 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln33_3_fu_387_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_90 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln33_4_fu_443_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten29_fu_94 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln31_fu_262_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln33_fu_232_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_fu_236_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal slt_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_2_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln33_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_1_cast_fu_310_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln38_fu_314_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln33_3_fu_336_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal slt24_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev25_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_1_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_2_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_2_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln41_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln41_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_1_fu_368_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_1_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_2_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_1_fu_438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv2d_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten29_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten29_fu_94 <= ap_const_lv96_0;
            elsif (((icmp_ln31_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten29_fu_94 <= add_ln31_fu_262_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_90 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    indvar_flatten_fu_90 <= select_ln33_4_fu_443_p3;
                end if;
            end if; 
        end if;
    end process;

    kh_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kh_fu_86 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    kh_fu_86 <= select_ln33_3_fu_387_p3;
                end if;
            end if; 
        end if;
    end process;

    kw_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kw_fu_82 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    kw_fu_82 <= add_ln35_fu_433_p2;
                end if;
            end if; 
        end if;
    end process;

    sum_1_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    sum_1_fu_78 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    sum_1_fu_78 <= sum_fu_427_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln33_reg_646 <= add_ln33_fu_330_p2;
                select_ln29_reg_641 <= select_ln29_fu_324_p3;
                sum_2_reg_657 <= grp_fu_164_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln41_reg_584 <= add_ln41_fu_252_p2;
                kh_1_reg_574 <= kh_fu_86;
                rev23_reg_579 <= rev23_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln33_reg_608 <= icmp_ln33_fu_278_p2;
                icmp_ln35_reg_618 <= icmp_ln35_fu_283_p2;
                indvar_flatten_load_reg_603 <= indvar_flatten_fu_90;
                kw_load_reg_598 <= kw_fu_82;
                sum_1_load_1_reg_592 <= sum_1_fu_78;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln41_reg_636 <= icmp_ln41_fu_319_p2;
                select_ln29_3_reg_623 <= select_ln29_3_fu_293_p3;
                select_ln33_reg_630 <= select_ln33_fu_303_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (select_ln29_3_reg_623 = ap_const_lv1_1))) then
                p_mid13_reg_652 <= p_mid13_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln23_1_cast_reg_552 <= sext_ln23_1_cast_fu_181_p1;
                sext_ln23_2_cast_reg_562 <= sext_ln23_2_cast_fu_189_p1;
                sext_ln25_cast_reg_568 <= sext_ln25_cast_fu_193_p1;
                sext_ln38_cast_reg_557 <= sext_ln38_cast_fu_185_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln31_fu_262_p2 <= std_logic_vector(unsigned(indvar_flatten29_fu_94) + unsigned(ap_const_lv96_1));
    add_ln33_1_fu_438_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_603) + unsigned(ap_const_lv64_1));
    add_ln33_fu_330_p2 <= std_logic_vector(unsigned(select_ln29_fu_324_p3) + unsigned(ap_const_lv31_1));
    add_ln35_fu_433_p2 <= std_logic_vector(unsigned(select_ln33_reg_630) + unsigned(ap_const_lv32_1));
    add_ln38_fu_314_p2 <= std_logic_vector(unsigned(trunc_ln38_1_cast_fu_310_p1) + unsigned(sext_ln38_cast_reg_557));
    add_ln41_1_fu_392_p2 <= std_logic_vector(unsigned(select_ln33_reg_630) + unsigned(trunc_ln));
    add_ln41_2_fu_375_p2 <= std_logic_vector(unsigned(zext_ln33_1_fu_355_p1) + unsigned(p_cast_mid2));
    add_ln41_fu_252_p2 <= std_logic_vector(unsigned(zext_ln33_2_fu_228_p1) + unsigned(p_cast_mid2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln31_fu_257_p2)
    begin
        if (((icmp_ln31_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_236_p2 <= std_logic_vector(unsigned(zext_ln33_fu_232_p1) + unsigned(sext_ln25_cast_reg_568));
    grp_fu_164_p_ce <= ap_const_logic_1;
    grp_fu_164_p_din0 <= sum_1_fu_78;
    grp_fu_164_p_din1 <= mul;
    grp_fu_164_p_opcode <= ap_const_lv2_0;
    icmp_ln31_fu_257_p2 <= "1" when (indvar_flatten29_fu_94 = mul_ln20_1) else "0";
    icmp_ln33_fu_278_p2 <= "1" when (indvar_flatten_fu_90 = mul_ln20) else "0";
    icmp_ln35_fu_283_p2 <= "1" when (kw_fu_82 = ksize) else "0";
    icmp_ln41_fu_319_p2 <= "1" when (signed(add_ln38_fu_314_p2) < signed(sext_ln23_1_cast_reg_552)) else "0";
    or_ln33_fu_298_p2 <= (select_ln29_3_fu_293_p3 or icmp_ln33_reg_608);
    or_ln41_1_fu_415_p2 <= (xor_ln41_fu_410_p2 or select_ln33_1_fu_368_p3);
    or_ln41_2_fu_421_p2 <= (tmp_fu_402_p3 or or_ln41_1_fu_415_p2);
    or_ln41_fu_396_p2 <= (select_ln33_2_fu_380_p3 or add_ln41_1_fu_392_p2);
    p_mid13_fu_340_p2 <= std_logic_vector(unsigned(zext_ln33_3_fu_336_p1) + unsigned(sext_ln25_cast_reg_568));
    rev23_fu_246_p2 <= (slt_fu_241_p2 xor ap_const_lv1_1);
    rev25_fu_362_p2 <= (slt24_fu_358_p2 xor ap_const_lv1_1);
    select_ln29_1_fu_345_p3 <= 
        cmp31_mid122 when (icmp_ln33_reg_608(0) = '1') else 
        rev23_reg_579;
    select_ln29_2_fu_350_p3 <= 
        p_cast_mid2 when (icmp_ln33_reg_608(0) = '1') else 
        add_ln41_reg_584;
    select_ln29_3_fu_293_p3 <= 
        icmp_ln35_1 when (icmp_ln33_reg_608(0) = '1') else 
        icmp_ln35_reg_618;
    select_ln29_fu_324_p3 <= 
        ap_const_lv31_0 when (icmp_ln33_reg_608(0) = '1') else 
        kh_1_reg_574;
    select_ln33_1_fu_368_p3 <= 
        rev25_fu_362_p2 when (select_ln29_3_reg_623(0) = '1') else 
        select_ln29_1_fu_345_p3;
    select_ln33_2_fu_380_p3 <= 
        add_ln41_2_fu_375_p2 when (select_ln29_3_reg_623(0) = '1') else 
        select_ln29_2_fu_350_p3;
    select_ln33_3_fu_387_p3 <= 
        add_ln33_reg_646 when (select_ln29_3_reg_623(0) = '1') else 
        select_ln29_reg_641;
    select_ln33_4_fu_443_p3 <= 
        ap_const_lv64_1 when (icmp_ln33_reg_608(0) = '1') else 
        add_ln33_1_fu_438_p2;
    select_ln33_fu_303_p3 <= 
        ap_const_lv32_0 when (or_ln33_fu_298_p2(0) = '1') else 
        kw_load_reg_598;
        sext_ln23_1_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_1),34));

        sext_ln23_2_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_2),34));

        sext_ln25_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln25),34));

        sext_ln38_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln38),34));

    slt24_fu_358_p2 <= "1" when (signed(p_mid13_reg_652) < signed(sext_ln23_2_cast_reg_562)) else "0";
    slt_fu_241_p2 <= "1" when (signed(empty_fu_236_p2) < signed(sext_ln23_2_cast_reg_562)) else "0";
    sum_2_out <= sum_1_fu_78;

    sum_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln31_fu_257_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln31_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sum_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_427_p3 <= 
        sum_1_load_1_reg_592 when (or_ln41_2_fu_421_p2(0) = '1') else 
        sum_2_reg_657;
    tmp_fu_402_p3 <= or_ln41_fu_396_p2(31 downto 31);
    trunc_ln38_1_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_303_p3),34));
    xor_ln41_fu_410_p2 <= (icmp_ln41_reg_636 xor ap_const_lv1_1);
    zext_ln33_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_reg_646),32));
    zext_ln33_2_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_fu_86),32));
    zext_ln33_3_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_fu_330_p2),34));
    zext_ln33_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kh_fu_86),34));
end behav;

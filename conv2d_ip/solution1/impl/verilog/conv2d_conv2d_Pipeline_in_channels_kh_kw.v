// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_conv2d_Pipeline_in_channels_kh_kw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln25,
        sext_ln23_2,
        p_cast_mid2,
        mul_ln20_1,
        mul_ln20,
        cmp31_mid122,
        ksize,
        icmp_ln35_1,
        sext_ln38,
        trunc_ln,
        sext_ln23_1,
        mul,
        sum_2_out,
        sum_2_out_ap_vld,
        grp_fu_164_p_din0,
        grp_fu_164_p_din1,
        grp_fu_164_p_opcode,
        grp_fu_164_p_dout0,
        grp_fu_164_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] sext_ln25;
input  [31:0] sext_ln23_2;
input  [31:0] p_cast_mid2;
input  [95:0] mul_ln20_1;
input  [63:0] mul_ln20;
input  [0:0] cmp31_mid122;
input  [31:0] ksize;
input  [0:0] icmp_ln35_1;
input  [32:0] sext_ln38;
input  [31:0] trunc_ln;
input  [31:0] sext_ln23_1;
input  [31:0] mul;
output  [31:0] sum_2_out;
output   sum_2_out_ap_vld;
output  [31:0] grp_fu_164_p_din0;
output  [31:0] grp_fu_164_p_din1;
output  [1:0] grp_fu_164_p_opcode;
input  [31:0] grp_fu_164_p_dout0;
output   grp_fu_164_p_ce;

reg ap_idle;
reg sum_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln31_fu_257_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [33:0] sext_ln23_1_cast_fu_181_p1;
reg  signed [33:0] sext_ln23_1_cast_reg_552;
wire  signed [33:0] sext_ln38_cast_fu_185_p1;
reg  signed [33:0] sext_ln38_cast_reg_557;
wire  signed [33:0] sext_ln23_2_cast_fu_189_p1;
reg  signed [33:0] sext_ln23_2_cast_reg_562;
wire  signed [33:0] sext_ln25_cast_fu_193_p1;
reg  signed [33:0] sext_ln25_cast_reg_568;
reg   [30:0] kh_1_reg_574;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] rev23_fu_246_p2;
reg   [0:0] rev23_reg_579;
wire   [31:0] add_ln41_fu_252_p2;
reg   [31:0] add_ln41_reg_584;
reg   [31:0] sum_1_load_1_reg_592;
reg   [31:0] kw_load_reg_598;
reg   [63:0] indvar_flatten_load_reg_603;
wire   [0:0] icmp_ln33_fu_278_p2;
reg   [0:0] icmp_ln33_reg_608;
wire   [0:0] icmp_ln35_fu_283_p2;
reg   [0:0] icmp_ln35_reg_618;
wire   [0:0] select_ln29_3_fu_293_p3;
reg   [0:0] select_ln29_3_reg_623;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln33_fu_303_p3;
reg   [31:0] select_ln33_reg_630;
wire   [0:0] icmp_ln41_fu_319_p2;
reg   [0:0] icmp_ln41_reg_636;
wire   [30:0] select_ln29_fu_324_p3;
reg   [30:0] select_ln29_reg_641;
wire    ap_block_pp0_stage5_11001;
wire   [30:0] add_ln33_fu_330_p2;
reg   [30:0] add_ln33_reg_646;
wire   [33:0] p_mid13_fu_340_p2;
reg   [33:0] p_mid13_reg_652;
reg   [31:0] sum_2_reg_657;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] sum_1_fu_78;
wire   [31:0] sum_fu_427_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [31:0] kw_fu_82;
wire   [31:0] add_ln35_fu_433_p2;
reg   [30:0] kh_fu_86;
wire   [30:0] select_ln33_3_fu_387_p3;
reg   [63:0] indvar_flatten_fu_90;
wire   [63:0] select_ln33_4_fu_443_p3;
reg   [95:0] indvar_flatten29_fu_94;
wire   [95:0] add_ln31_fu_262_p2;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0;
wire   [33:0] zext_ln33_fu_232_p1;
wire   [33:0] empty_fu_236_p2;
wire   [0:0] slt_fu_241_p2;
wire   [31:0] zext_ln33_2_fu_228_p1;
wire    ap_block_pp0_stage2;
wire   [0:0] or_ln33_fu_298_p2;
wire   [33:0] trunc_ln38_1_cast_fu_310_p1;
wire   [33:0] add_ln38_fu_314_p2;
wire    ap_block_pp0_stage5;
wire   [33:0] zext_ln33_3_fu_336_p1;
wire   [0:0] slt24_fu_358_p2;
wire   [0:0] rev25_fu_362_p2;
wire   [0:0] select_ln29_1_fu_345_p3;
wire   [31:0] zext_ln33_1_fu_355_p1;
wire   [31:0] add_ln41_2_fu_375_p2;
wire   [31:0] select_ln29_2_fu_350_p3;
wire   [31:0] add_ln41_1_fu_392_p2;
wire   [31:0] select_ln33_2_fu_380_p3;
wire   [31:0] or_ln41_fu_396_p2;
wire   [0:0] xor_ln41_fu_410_p2;
wire   [0:0] select_ln33_1_fu_368_p3;
wire   [0:0] or_ln41_1_fu_415_p2;
wire   [0:0] tmp_fu_402_p3;
wire   [0:0] or_ln41_2_fu_421_p2;
wire   [63:0] add_ln33_1_fu_438_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

conv2d_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten29_fu_94 <= 96'd0;
    end else if (((icmp_ln31_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten29_fu_94 <= add_ln31_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 64'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten_fu_90 <= select_ln33_4_fu_443_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kh_fu_86 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            kh_fu_86 <= select_ln33_3_fu_387_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kw_fu_82 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            kw_fu_82 <= add_ln35_fu_433_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_1_fu_78 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            sum_1_fu_78 <= sum_fu_427_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln33_reg_646 <= add_ln33_fu_330_p2;
        select_ln29_reg_641 <= select_ln29_fu_324_p3;
        sum_2_reg_657 <= grp_fu_164_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln41_reg_584 <= add_ln41_fu_252_p2;
        kh_1_reg_574 <= kh_fu_86;
        rev23_reg_579 <= rev23_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln33_reg_608 <= icmp_ln33_fu_278_p2;
        icmp_ln35_reg_618 <= icmp_ln35_fu_283_p2;
        indvar_flatten_load_reg_603 <= indvar_flatten_fu_90;
        kw_load_reg_598 <= kw_fu_82;
        sum_1_load_1_reg_592 <= sum_1_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln41_reg_636 <= icmp_ln41_fu_319_p2;
        select_ln29_3_reg_623 <= select_ln29_3_fu_293_p3;
        select_ln33_reg_630 <= select_ln33_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (select_ln29_3_reg_623 == 1'd1))) begin
        p_mid13_reg_652 <= p_mid13_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln23_1_cast_reg_552 <= sext_ln23_1_cast_fu_181_p1;
        sext_ln23_2_cast_reg_562 <= sext_ln23_2_cast_fu_189_p1;
        sext_ln25_cast_reg_568 <= sext_ln25_cast_fu_193_p1;
        sext_ln38_cast_reg_557 <= sext_ln38_cast_fu_185_p1;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_2_out_ap_vld = 1'b1;
    end else begin
        sum_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_262_p2 = (indvar_flatten29_fu_94 + 96'd1);

assign add_ln33_1_fu_438_p2 = (indvar_flatten_load_reg_603 + 64'd1);

assign add_ln33_fu_330_p2 = (select_ln29_fu_324_p3 + 31'd1);

assign add_ln35_fu_433_p2 = (select_ln33_reg_630 + 32'd1);

assign add_ln38_fu_314_p2 = ($signed(trunc_ln38_1_cast_fu_310_p1) + $signed(sext_ln38_cast_reg_557));

assign add_ln41_1_fu_392_p2 = (select_ln33_reg_630 + trunc_ln);

assign add_ln41_2_fu_375_p2 = (zext_ln33_1_fu_355_p1 + p_cast_mid2);

assign add_ln41_fu_252_p2 = (zext_ln33_2_fu_228_p1 + p_cast_mid2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_fu_236_p2 = ($signed(zext_ln33_fu_232_p1) + $signed(sext_ln25_cast_reg_568));

assign grp_fu_164_p_ce = 1'b1;

assign grp_fu_164_p_din0 = sum_1_fu_78;

assign grp_fu_164_p_din1 = mul;

assign grp_fu_164_p_opcode = 2'd0;

assign icmp_ln31_fu_257_p2 = ((indvar_flatten29_fu_94 == mul_ln20_1) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_278_p2 = ((indvar_flatten_fu_90 == mul_ln20) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_283_p2 = ((kw_fu_82 == ksize) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_319_p2 = (($signed(add_ln38_fu_314_p2) < $signed(sext_ln23_1_cast_reg_552)) ? 1'b1 : 1'b0);

assign or_ln33_fu_298_p2 = (select_ln29_3_fu_293_p3 | icmp_ln33_reg_608);

assign or_ln41_1_fu_415_p2 = (xor_ln41_fu_410_p2 | select_ln33_1_fu_368_p3);

assign or_ln41_2_fu_421_p2 = (tmp_fu_402_p3 | or_ln41_1_fu_415_p2);

assign or_ln41_fu_396_p2 = (select_ln33_2_fu_380_p3 | add_ln41_1_fu_392_p2);

assign p_mid13_fu_340_p2 = ($signed(zext_ln33_3_fu_336_p1) + $signed(sext_ln25_cast_reg_568));

assign rev23_fu_246_p2 = (slt_fu_241_p2 ^ 1'd1);

assign rev25_fu_362_p2 = (slt24_fu_358_p2 ^ 1'd1);

assign select_ln29_1_fu_345_p3 = ((icmp_ln33_reg_608[0:0] == 1'b1) ? cmp31_mid122 : rev23_reg_579);

assign select_ln29_2_fu_350_p3 = ((icmp_ln33_reg_608[0:0] == 1'b1) ? p_cast_mid2 : add_ln41_reg_584);

assign select_ln29_3_fu_293_p3 = ((icmp_ln33_reg_608[0:0] == 1'b1) ? icmp_ln35_1 : icmp_ln35_reg_618);

assign select_ln29_fu_324_p3 = ((icmp_ln33_reg_608[0:0] == 1'b1) ? 31'd0 : kh_1_reg_574);

assign select_ln33_1_fu_368_p3 = ((select_ln29_3_reg_623[0:0] == 1'b1) ? rev25_fu_362_p2 : select_ln29_1_fu_345_p3);

assign select_ln33_2_fu_380_p3 = ((select_ln29_3_reg_623[0:0] == 1'b1) ? add_ln41_2_fu_375_p2 : select_ln29_2_fu_350_p3);

assign select_ln33_3_fu_387_p3 = ((select_ln29_3_reg_623[0:0] == 1'b1) ? add_ln33_reg_646 : select_ln29_reg_641);

assign select_ln33_4_fu_443_p3 = ((icmp_ln33_reg_608[0:0] == 1'b1) ? 64'd1 : add_ln33_1_fu_438_p2);

assign select_ln33_fu_303_p3 = ((or_ln33_fu_298_p2[0:0] == 1'b1) ? 32'd0 : kw_load_reg_598);

assign sext_ln23_1_cast_fu_181_p1 = $signed(sext_ln23_1);

assign sext_ln23_2_cast_fu_189_p1 = $signed(sext_ln23_2);

assign sext_ln25_cast_fu_193_p1 = $signed(sext_ln25);

assign sext_ln38_cast_fu_185_p1 = $signed(sext_ln38);

assign slt24_fu_358_p2 = (($signed(p_mid13_reg_652) < $signed(sext_ln23_2_cast_reg_562)) ? 1'b1 : 1'b0);

assign slt_fu_241_p2 = (($signed(empty_fu_236_p2) < $signed(sext_ln23_2_cast_reg_562)) ? 1'b1 : 1'b0);

assign sum_2_out = sum_1_fu_78;

assign sum_fu_427_p3 = ((or_ln41_2_fu_421_p2[0:0] == 1'b1) ? sum_1_load_1_reg_592 : sum_2_reg_657);

assign tmp_fu_402_p3 = or_ln41_fu_396_p2[32'd31];

assign trunc_ln38_1_cast_fu_310_p1 = select_ln33_fu_303_p3;

assign xor_ln41_fu_410_p2 = (icmp_ln41_reg_636 ^ 1'd1);

assign zext_ln33_1_fu_355_p1 = add_ln33_reg_646;

assign zext_ln33_2_fu_228_p1 = kh_fu_86;

assign zext_ln33_3_fu_336_p1 = add_ln33_fu_330_p2;

assign zext_ln33_fu_232_p1 = kh_fu_86;

endmodule //conv2d_conv2d_Pipeline_in_channels_kh_kw

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    weight : IN STD_LOGIC_VECTOR (31 downto 0);
    bias : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    in_channels : IN STD_LOGIC_VECTOR (31 downto 0);
    out_channels : IN STD_LOGIC_VECTOR (31 downto 0);
    ksize : IN STD_LOGIC_VECTOR (31 downto 0);
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d_conv2d,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3231,HLS_SYN_LUT=3288,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_reg_554 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln20_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln20_reg_575 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln20_2_reg_581 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln23_fu_305_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln23_reg_617 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal height_cast_fu_309_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal height_cast_reg_623 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln20_1_reg_638 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln20_3_reg_643 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln27_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_392_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_reg_661 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_1_fu_400_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_1_reg_667 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln25_fu_435_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln25_reg_673 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln25_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln38_fu_449_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln38_reg_683 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln38_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev94_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev94_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_idle : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_ready : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out_ap_vld : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_ce : STD_LOGIC;
    signal grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal w_fu_72 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln27_fu_472_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal h_fu_76 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten42_fu_80 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln25_2_fu_414_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten67_fu_84 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln23_fu_346_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_3_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_neg_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_275_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_cast_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_t_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_cast_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_fu_298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_cast_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_1_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_fu_363_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln23_2_fu_379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_1_fu_371_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_fu_386_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln25_1_fu_408_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_432_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln27_fu_446_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal slt_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal grp_fu_208_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_208_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_241_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_241_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_254_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_254_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv2d_conv2d_Pipeline_in_channels_kh_kw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln25 : IN STD_LOGIC_VECTOR (32 downto 0);
        sext_ln23_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cast_mid2 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul_ln20_1 : IN STD_LOGIC_VECTOR (95 downto 0);
        mul_ln20 : IN STD_LOGIC_VECTOR (63 downto 0);
        cmp31_mid122 : IN STD_LOGIC_VECTOR (0 downto 0);
        ksize : IN STD_LOGIC_VECTOR (31 downto 0);
        icmp_ln35_1 : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln38 : IN STD_LOGIC_VECTOR (32 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln23_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out_ap_vld : OUT STD_LOGIC;
        grp_fu_164_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_164_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_164_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_164_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_164_p_ce : OUT STD_LOGIC );
    end component;


    component conv2d_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv2d_mul_32ns_64ns_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    grp_conv2d_Pipeline_in_channels_kh_kw_fu_147 : component conv2d_conv2d_Pipeline_in_channels_kh_kw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start,
        ap_done => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done,
        ap_idle => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_idle,
        ap_ready => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_ready,
        sext_ln25 => sub_ln25_reg_673,
        sext_ln23_2 => height,
        p_cast_mid2 => trunc_ln25_reg_678,
        mul_ln20_1 => mul_ln20_1_reg_638,
        mul_ln20 => mul_ln20_reg_575,
        cmp31_mid122 => rev94_reg_693,
        ksize => ksize,
        icmp_ln35_1 => icmp_ln35_reg_653,
        sext_ln38 => sub_ln38_reg_683,
        trunc_ln => trunc_ln38_reg_688,
        sext_ln23_1 => width,
        mul => mul_reg_633,
        sum_2_out => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out,
        sum_2_out_ap_vld => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out_ap_vld,
        grp_fu_164_p_din0 => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din0,
        grp_fu_164_p_din1 => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din1,
        grp_fu_164_p_opcode => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_opcode,
        grp_fu_164_p_dout0 => grp_fu_164_p2,
        grp_fu_164_p_ce => grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_ce);

    fadd_32ns_32ns_32_5_full_dsp_1_U15 : component conv2d_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => grp_fu_164_p1,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component conv2d_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    mul_32ns_32ns_64_2_1_U17 : component conv2d_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);

    mul_32ns_32ns_64_2_1_U18 : component conv2d_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p0,
        din1 => grp_fu_208_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    mul_32ns_64ns_96_5_1_U19 : component conv2d_mul_32ns_64ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_241_p0,
        din1 => grp_fu_241_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);

    mul_32ns_64ns_96_5_1_U20 : component conv2d_mul_32ns_64ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_76 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                h_fu_76 <= select_ln25_1_reg_667;
            end if; 
        end if;
    end process;

    indvar_flatten42_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten42_fu_80 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_0))) then 
                indvar_flatten42_fu_80 <= select_ln25_2_fu_414_p3;
            end if; 
        end if;
    end process;

    indvar_flatten67_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten67_fu_84 <= ap_const_lv96_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_0))) then 
                indvar_flatten67_fu_84 <= add_ln23_fu_346_p2;
            end if; 
        end if;
    end process;

    w_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_fu_72 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_fu_72 <= add_ln27_fu_472_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_reg_628 <= empty_fu_312_p1;
                height_cast_reg_623 <= height_cast_fu_309_p1;
                icmp_ln27_1_reg_648 <= icmp_ln27_1_fu_316_p2;
                icmp_ln35_reg_653 <= icmp_ln35_fu_321_p2;
                mul_ln20_1_reg_638 <= grp_fu_241_p2;
                mul_ln20_3_reg_643 <= grp_fu_254_p2;
                mul_reg_633 <= grp_fu_168_p2;
                sext_ln23_reg_617 <= sext_ln23_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln20_2_reg_581 <= grp_fu_208_p2;
                mul_ln20_reg_575 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_lshr_f_reg_554 <= ksize(31 downto 1);
                tmp_reg_549 <= ksize(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                rev94_reg_693 <= rev94_fu_465_p2;
                sub_ln25_reg_673 <= sub_ln25_fu_435_p2;
                sub_ln38_reg_683 <= sub_ln38_fu_449_p2;
                trunc_ln25_reg_678 <= trunc_ln25_fu_441_p1;
                trunc_ln38_reg_688 <= trunc_ln38_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_0))) then
                select_ln25_1_reg_667 <= select_ln25_1_fu_400_p3;
                select_ln25_reg_661 <= select_ln25_fu_392_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln23_fu_341_p2, grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_346_p2 <= std_logic_vector(unsigned(indvar_flatten67_fu_84) + unsigned(ap_const_lv96_1));
    add_ln25_1_fu_408_p2 <= std_logic_vector(unsigned(indvar_flatten42_fu_80) + unsigned(ap_const_lv64_1));
    add_ln25_fu_386_p2 <= std_logic_vector(unsigned(select_ln23_fu_363_p3) + unsigned(ap_const_lv31_1));
    add_ln27_fu_472_p2 <= std_logic_vector(unsigned(select_ln25_reg_661) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done)
    begin
        if ((grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln23_fu_341_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln23_fu_341_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln23_fu_341_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div_fu_298_p3 <= 
        p_neg_t_fu_289_p2 when (tmp_reg_549(0) = '1') else 
        p_lshr_f_cast_fu_295_p1;
    empty_fu_312_p1 <= bias;
    grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_ap_start_reg;

    grp_fu_164_ce_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_ce, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_164_ce <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_ce;
        else 
            grp_fu_164_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_164_p0_assign_proc : process(grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out, grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_164_p0 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_164_p0 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_sum_2_out;
        else 
            grp_fu_164_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_164_p1_assign_proc : process(empty_reg_628, grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din1, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_164_p1 <= grp_conv2d_Pipeline_in_channels_kh_kw_fu_147_grp_fu_164_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_164_p1 <= empty_reg_628;
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_168_p0 <= x;
    grp_fu_168_p1 <= weight;
    grp_fu_194_p0 <= zext_ln20_fu_190_p1(32 - 1 downto 0);
    grp_fu_194_p1 <= zext_ln20_fu_190_p1(32 - 1 downto 0);
    grp_fu_208_p0 <= grp_fu_208_p00(32 - 1 downto 0);
    grp_fu_208_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln20_3_fu_200_p0),64));
    grp_fu_208_p1 <= grp_fu_208_p10(32 - 1 downto 0);
    grp_fu_208_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width),64));
    grp_fu_241_p0 <= grp_fu_241_p00(32 - 1 downto 0);
    grp_fu_241_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels),96));
    grp_fu_241_p1 <= grp_fu_241_p10(64 - 1 downto 0);
    grp_fu_241_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln20_reg_575),96));
    grp_fu_254_p0 <= grp_fu_254_p00(32 - 1 downto 0);
    grp_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_channels),96));
    grp_fu_254_p1 <= grp_fu_254_p10(64 - 1 downto 0);
    grp_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln20_2_reg_581),96));
    height_cast_fu_309_p0 <= height;
        height_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height_cast_fu_309_p0),33));

    icmp_ln23_fu_341_p2 <= "1" when (indvar_flatten67_fu_84 = mul_ln20_3_reg_643) else "0";
    icmp_ln25_fu_358_p2 <= "1" when (indvar_flatten42_fu_80 = mul_ln20_2_reg_581) else "0";
    icmp_ln27_1_fu_316_p2 <= "1" when (signed(width) > signed(ap_const_lv32_0)) else "0";
    icmp_ln27_fu_336_p2 <= "1" when (signed(zext_ln27_1_fu_332_p1) < signed(width)) else "0";
    icmp_ln35_fu_321_p2 <= "1" when (ksize = ap_const_lv32_0) else "0";
    p_lshr_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_275_p4),32));
    p_lshr_f_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_reg_554),32));
    p_lshr_fu_275_p4 <= p_neg_fu_270_p2(31 downto 1);
    p_neg_fu_270_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ksize));
    p_neg_t_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_cast_fu_285_p1));
    rev94_fu_465_p2 <= (slt_fu_460_p2 xor ap_const_lv1_1);
    select_ln23_1_fu_371_p3 <= 
        ap_const_lv31_0 when (icmp_ln25_fu_358_p2(0) = '1') else 
        w_fu_72;
    select_ln23_2_fu_379_p3 <= 
        icmp_ln27_1_reg_648 when (icmp_ln25_fu_358_p2(0) = '1') else 
        icmp_ln27_fu_336_p2;
    select_ln23_fu_363_p3 <= 
        ap_const_lv31_0 when (icmp_ln25_fu_358_p2(0) = '1') else 
        h_fu_76;
    select_ln25_1_fu_400_p3 <= 
        select_ln23_fu_363_p3 when (select_ln23_2_fu_379_p3(0) = '1') else 
        add_ln25_fu_386_p2;
    select_ln25_2_fu_414_p3 <= 
        ap_const_lv64_1 when (icmp_ln25_fu_358_p2(0) = '1') else 
        add_ln25_1_fu_408_p2;
    select_ln25_fu_392_p3 <= 
        select_ln23_1_fu_371_p3 when (select_ln23_2_fu_379_p3(0) = '1') else 
        ap_const_lv31_0;
        sext_ln23_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(div_fu_298_p3),33));

    slt_fu_460_p2 <= "1" when (signed(sub_ln25_fu_435_p2) < signed(height_cast_reg_623)) else "0";
    sub_ln25_fu_435_p2 <= std_logic_vector(unsigned(zext_ln25_fu_432_p1) - unsigned(sext_ln23_reg_617));
    sub_ln38_fu_449_p2 <= std_logic_vector(unsigned(zext_ln27_fu_446_p1) - unsigned(sext_ln23_reg_617));
    trunc_ln25_fu_441_p1 <= sub_ln25_fu_435_p2(32 - 1 downto 0);
    trunc_ln38_fu_455_p1 <= sub_ln38_fu_449_p2(32 - 1 downto 0);
    y <= grp_fu_164_p2;

    y_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln20_3_fu_200_p0 <= height;
    zext_ln20_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ksize),64));
    zext_ln25_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_1_reg_667),33));
    zext_ln27_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_fu_72),32));
    zext_ln27_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_661),33));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_maxpool2d_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    x_ce2 : OUT STD_LOGIC;
    x_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    x_ce3 : OUT STD_LOGIC;
    x_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_865_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_865_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_865_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_865_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_865_p_ce : OUT STD_LOGIC;
    grp_fu_869_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_869_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_869_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_869_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_869_p_ce : OUT STD_LOGIC;
    grp_fu_873_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_873_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_873_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_873_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_873_p_ce : OUT STD_LOGIC;
    grp_fu_877_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_877_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_877_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_877_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_877_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_top_maxpool2d_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln2848_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln2848_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2848_reg_1283_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2850_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2850_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2850_reg_1287_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_26_fu_376_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_26_reg_1300 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_27_fu_382_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_27_reg_1305 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_28_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_28_reg_1311 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid129_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid129_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid151_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid151_reg_1322 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_37_fu_521_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_37_reg_1327 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln2852_mid282_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2852_mid282_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln2850_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln2850_reg_1339 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid110_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid110_reg_1345 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_mid112_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid112_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_40_fu_617_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_40_reg_1356 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2864_fu_926_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2864_reg_1381_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal x_load_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_reg_1386_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_1_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_1_reg_1393_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_1_reg_1393_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_1_reg_1393_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_2_reg_1400_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_3_reg_1407_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_fu_973_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_reg_1414_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_1_fu_1062_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_1_reg_1421 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_1_reg_1421_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_2_fu_1150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_2_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_2_reg_1428_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_3_fu_1238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_3_reg_1435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln2860_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln2860_1_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2860_2_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2860_3_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2864_1_fu_1244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln2852_fu_629_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal h_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln2850_4_fu_621_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln2850_5_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ch_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln2848_fu_536_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten83_fu_104 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2848_1_fu_221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten83_load : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2850_1_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_266_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_fu_270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_fu_282_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_22_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_308_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_332_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_342_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_23_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_24_fu_346_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_25_fu_352_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_fu_356_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2850_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_21_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2848_fu_395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_34_fu_415_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_mid1_fu_419_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_mid1_fu_431_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_mid1_fu_427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_mid1_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_35_fu_468_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_mid1_fu_464_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_mid1_fu_474_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid131_fu_478_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_36_fu_491_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_mid_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_mid_fu_495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_mid149_fu_511_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln2852_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid227_fu_401_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid228_fu_408_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln2850_fu_543_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid1_fu_561_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_mid1_fu_571_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid232_fu_484_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid18_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_39_fu_581_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_mid1_fu_593_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_mid1_fu_585_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_mid1_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2850_1_fu_557_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid230_fu_449_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_657_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_650_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_fu_664_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_30_fu_674_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_fu_679_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_fu_691_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_699_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_mid_fu_721_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_mid_fu_714_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_mid163_fu_728_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid165_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_29_fu_668_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid167_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_750_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_mid_fu_762_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_mid_fu_754_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_mid177_fu_770_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid179_fu_774_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_32_fu_703_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid252_fu_709_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_mid1_fu_800_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_mid1_fu_793_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_mid1_fu_807_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid266_fu_738_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid114_fu_811_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid116_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_fu_829_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_mid1_fu_841_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_mid1_fu_833_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_mid1_fu_849_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid280_fu_780_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid118_fu_853_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln2850_2_fu_817_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_cast10_fu_866_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln2860_fu_869_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln2860_fu_880_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln2850_3_fu_859_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln2860_1_fu_891_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln2860_1_fu_902_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_913_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln2864_fu_922_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln2850_1_fu_787_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln2860_fu_932_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_935_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_fu_945_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_1_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_2_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_1_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_2_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_983_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_1_fu_993_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_3_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_2_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1000_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_2_fu_1010_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_5_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_4_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_3_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_4_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_1_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_2_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_3_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_4_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1071_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_3_fu_1081_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_7_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_6_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1088_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_4_fu_1098_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_9_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_8_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_5_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_6_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_3_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_4_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_5_fu_1156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_6_fu_1173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1159_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_5_fu_1169_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_11_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_10_fu_1190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1176_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_6_fu_1186_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_13_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_12_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_7_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_8_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_5_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_6_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ch_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_100 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln2848_reg_1283 = ap_const_lv1_0))) then 
                    ch_fu_100 <= select_ln2848_fu_536_p3;
                end if;
            end if; 
        end if;
    end process;

    h_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    h_fu_92 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln2848_reg_1283 = ap_const_lv1_0))) then 
                    h_fu_92 <= select_ln2850_4_fu_621_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten83_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_215_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten83_fu_104 <= add_ln2848_1_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten83_fu_104 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_215_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_96 <= select_ln2850_5_fu_242_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_88 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln2848_reg_1283 = ap_const_lv1_0))) then 
                    w_fu_88 <= add_ln2852_fu_629_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2848_reg_1283_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln2864_reg_1381 <= add_ln2864_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln2864_reg_1381_pp0_iter10_reg <= add_ln2864_reg_1381_pp0_iter9_reg;
                add_ln2864_reg_1381_pp0_iter11_reg <= add_ln2864_reg_1381_pp0_iter10_reg;
                add_ln2864_reg_1381_pp0_iter3_reg <= add_ln2864_reg_1381;
                add_ln2864_reg_1381_pp0_iter4_reg <= add_ln2864_reg_1381_pp0_iter3_reg;
                add_ln2864_reg_1381_pp0_iter5_reg <= add_ln2864_reg_1381_pp0_iter4_reg;
                add_ln2864_reg_1381_pp0_iter6_reg <= add_ln2864_reg_1381_pp0_iter5_reg;
                add_ln2864_reg_1381_pp0_iter7_reg <= add_ln2864_reg_1381_pp0_iter6_reg;
                add_ln2864_reg_1381_pp0_iter8_reg <= add_ln2864_reg_1381_pp0_iter7_reg;
                add_ln2864_reg_1381_pp0_iter9_reg <= add_ln2864_reg_1381_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                select_ln2860_1_reg_1421 <= select_ln2860_1_fu_1062_p3;
                select_ln2860_1_reg_1421_pp0_iter8_reg <= select_ln2860_1_reg_1421;
                select_ln2860_2_reg_1428 <= select_ln2860_2_fu_1150_p3;
                select_ln2860_2_reg_1428_pp0_iter10_reg <= select_ln2860_2_reg_1428;
                select_ln2860_3_reg_1435 <= select_ln2860_3_fu_1238_p3;
                select_ln2860_reg_1414 <= select_ln2860_fu_973_p3;
                select_ln2860_reg_1414_pp0_iter6_reg <= select_ln2860_reg_1414;
                x_load_1_reg_1393_pp0_iter4_reg <= x_load_1_reg_1393;
                x_load_1_reg_1393_pp0_iter5_reg <= x_load_1_reg_1393_pp0_iter4_reg;
                x_load_1_reg_1393_pp0_iter6_reg <= x_load_1_reg_1393_pp0_iter5_reg;
                x_load_2_reg_1400_pp0_iter4_reg <= x_load_2_reg_1400;
                x_load_2_reg_1400_pp0_iter5_reg <= x_load_2_reg_1400_pp0_iter4_reg;
                x_load_2_reg_1400_pp0_iter6_reg <= x_load_2_reg_1400_pp0_iter5_reg;
                x_load_2_reg_1400_pp0_iter7_reg <= x_load_2_reg_1400_pp0_iter6_reg;
                x_load_2_reg_1400_pp0_iter8_reg <= x_load_2_reg_1400_pp0_iter7_reg;
                x_load_3_reg_1407_pp0_iter10_reg <= x_load_3_reg_1407_pp0_iter9_reg;
                x_load_3_reg_1407_pp0_iter4_reg <= x_load_3_reg_1407;
                x_load_3_reg_1407_pp0_iter5_reg <= x_load_3_reg_1407_pp0_iter4_reg;
                x_load_3_reg_1407_pp0_iter6_reg <= x_load_3_reg_1407_pp0_iter5_reg;
                x_load_3_reg_1407_pp0_iter7_reg <= x_load_3_reg_1407_pp0_iter6_reg;
                x_load_3_reg_1407_pp0_iter8_reg <= x_load_3_reg_1407_pp0_iter7_reg;
                x_load_3_reg_1407_pp0_iter9_reg <= x_load_3_reg_1407_pp0_iter8_reg;
                x_load_reg_1386_pp0_iter4_reg <= x_load_reg_1386;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_27_reg_1305 <= empty_27_fu_382_p2;
                icmp_ln2848_reg_1283 <= icmp_ln2848_fu_215_p2;
                icmp_ln2848_reg_1283_pp0_iter1_reg <= icmp_ln2848_reg_1283;
                icmp_ln2850_reg_1287_pp0_iter1_reg <= icmp_ln2850_reg_1287;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2850_reg_1287 = ap_const_lv1_0))) then
                    empty_26_reg_1300(9 downto 1) <= empty_26_fu_376_p2(9 downto 1);
                empty_28_reg_1311 <= empty_28_fu_388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2850_reg_1287 = ap_const_lv1_1) and (icmp_ln2848_reg_1283 = ap_const_lv1_0))) then
                    empty_37_reg_1327(6 downto 2) <= empty_37_fu_521_p1(6 downto 2);
                    p_mid151_reg_1322(9 downto 2) <= p_mid151_fu_515_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2848_reg_1283 = ap_const_lv1_0))) then
                empty_40_reg_1356 <= empty_40_fu_617_p1;
                icmp_ln2852_mid282_reg_1332 <= icmp_ln2852_mid282_fu_531_p2;
                    p_mid110_reg_1345(9 downto 1) <= p_mid110_fu_605_p2(9 downto 1);
                p_mid112_reg_1350 <= p_mid112_fu_611_p2;
                    p_mid129_reg_1316(7 downto 2) <= p_mid129_fu_443_p2(7 downto 2);
                select_ln2850_reg_1339 <= select_ln2850_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2848_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln2850_reg_1287 <= icmp_ln2850_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                x_load_1_reg_1393 <= x_q2;
                x_load_2_reg_1400 <= x_q1;
                x_load_3_reg_1407 <= x_q0;
                x_load_reg_1386 <= x_q3;
            end if;
        end if;
    end process;
    empty_26_reg_1300(0) <= '0';
    p_mid129_reg_1316(1 downto 0) <= "00";
    p_mid151_reg_1322(1 downto 0) <= "00";
    empty_37_reg_1327(1 downto 0) <= "00";
    p_mid110_reg_1345(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln2848_1_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten83_load) + unsigned(ap_const_lv10_1));
    add_ln2848_fu_395_p2 <= std_logic_vector(unsigned(ch_fu_100) + unsigned(ap_const_lv3_1));
    add_ln2850_1_fu_236_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln2850_fu_543_p2 <= std_logic_vector(unsigned(h_mid227_fu_401_p3) + unsigned(ap_const_lv5_2));
    add_ln2852_fu_629_p2 <= std_logic_vector(unsigned(select_ln2850_fu_549_p3) + unsigned(ap_const_lv5_2));
    add_ln2860_1_fu_891_p2 <= std_logic_vector(unsigned(select_ln2850_3_fu_859_p3) + unsigned(w_cast10_fu_866_p1));
    add_ln2860_fu_869_p2 <= std_logic_vector(unsigned(select_ln2850_2_fu_817_p3) + unsigned(w_cast10_fu_866_p1));
    add_ln2864_fu_926_p2 <= std_logic_vector(unsigned(zext_ln2864_fu_922_p1) + unsigned(select_ln2850_1_fu_787_p3));
    and_ln2860_1_fu_1050_p2 <= (or_ln2860_4_fu_1044_p2 and or_ln2860_3_fu_1026_p2);
    and_ln2860_2_fu_1056_p2 <= (grp_fu_869_p_dout0 and and_ln2860_1_fu_1050_p2);
    and_ln2860_3_fu_1138_p2 <= (or_ln2860_6_fu_1132_p2 and or_ln2860_5_fu_1114_p2);
    and_ln2860_4_fu_1144_p2 <= (grp_fu_873_p_dout0 and and_ln2860_3_fu_1138_p2);
    and_ln2860_5_fu_1226_p2 <= (or_ln2860_8_fu_1220_p2 and or_ln2860_7_fu_1202_p2);
    and_ln2860_6_fu_1232_p2 <= (grp_fu_877_p_dout0 and and_ln2860_5_fu_1226_p2);
    and_ln2860_fu_967_p2 <= (or_ln2860_2_fu_961_p2 and grp_fu_865_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln2848_fu_215_p2)
    begin
        if (((icmp_ln2848_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln2848_reg_1283_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln2848_reg_1283_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten83_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten83_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten83_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten83_load <= indvar_flatten83_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;

    bitcast_ln2860_1_fu_980_p1 <= select_ln2860_reg_1414_pp0_iter6_reg;
    bitcast_ln2860_2_fu_997_p1 <= x_load_1_reg_1393_pp0_iter6_reg;
    bitcast_ln2860_3_fu_1068_p1 <= select_ln2860_1_reg_1421_pp0_iter8_reg;
    bitcast_ln2860_4_fu_1085_p1 <= x_load_2_reg_1400_pp0_iter8_reg;
    bitcast_ln2860_5_fu_1156_p1 <= select_ln2860_2_reg_1428_pp0_iter10_reg;
    bitcast_ln2860_6_fu_1173_p1 <= x_load_3_reg_1407_pp0_iter10_reg;
    bitcast_ln2860_fu_932_p1 <= x_load_reg_1386_pp0_iter4_reg;
    empty_21_fu_294_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_278_p1) - unsigned(p_shl3_cast_fu_290_p1));
    empty_22_fu_312_p2 <= std_logic_vector(shift_left(unsigned(ch_fu_100),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    empty_23_fu_322_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_308_p1) - unsigned(p_shl1_cast_fu_318_p1));
    empty_24_fu_346_p2 <= std_logic_vector(unsigned(p_cast_fu_342_p1) + unsigned(empty_23_fu_322_p2));
    empty_25_fu_352_p1 <= empty_24_fu_346_p2(6 - 1 downto 0);
    empty_26_fu_376_p2 <= std_logic_vector(unsigned(p_shl4_fu_356_p3) - unsigned(p_shl5_cast_fu_372_p1));
    empty_27_fu_382_p2 <= std_logic_vector(unsigned(zext_ln2850_fu_328_p1) + unsigned(empty_21_fu_294_p2));
    empty_28_fu_388_p1 <= empty_27_fu_382_p2(7 - 1 downto 0);
    empty_29_fu_668_p2 <= std_logic_vector(unsigned(p_shl8_fu_650_p3) - unsigned(p_shl9_cast_fu_664_p1));
    empty_30_fu_674_p2 <= (empty_27_reg_1305 or ap_const_lv8_1);
    empty_31_fu_679_p1 <= empty_30_fu_674_p2(7 - 1 downto 0);
    empty_32_fu_703_p2 <= std_logic_vector(unsigned(p_shl6_fu_683_p3) - unsigned(p_shl7_cast_fu_699_p1));
    empty_34_fu_415_p1 <= add_ln2848_fu_395_p2(2 - 1 downto 0);
    empty_35_fu_468_p2 <= std_logic_vector(shift_left(unsigned(add_ln2848_fu_395_p2),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    empty_36_fu_491_p1 <= p_mid131_fu_478_p2(6 - 1 downto 0);
    empty_37_fu_521_p1 <= p_mid129_fu_443_p2(7 - 1 downto 0);
    empty_38_fu_750_p1 <= p_mid167_fu_745_p2(7 - 1 downto 0);
    empty_39_fu_581_p1 <= p_mid18_fu_575_p2(6 - 1 downto 0);
    empty_40_fu_617_p1 <= p_mid112_fu_611_p2(7 - 1 downto 0);
    empty_41_fu_829_p1 <= p_mid116_fu_824_p2(7 - 1 downto 0);
    empty_fu_266_p1 <= ch_fu_100(2 - 1 downto 0);
    grp_fu_865_p_ce <= ap_const_logic_1;
    grp_fu_865_p_din0 <= x_load_reg_1386;
    grp_fu_865_p_din1 <= ap_const_lv32_FF7FFFFF;
    grp_fu_865_p_opcode <= ap_const_lv5_4;
    grp_fu_869_p_ce <= ap_const_logic_1;
    grp_fu_869_p_din0 <= select_ln2860_reg_1414;
    grp_fu_869_p_din1 <= x_load_1_reg_1393_pp0_iter5_reg;
    grp_fu_869_p_opcode <= ap_const_lv5_2;
    grp_fu_873_p_ce <= ap_const_logic_1;
    grp_fu_873_p_din0 <= select_ln2860_1_reg_1421;
    grp_fu_873_p_din1 <= x_load_2_reg_1400_pp0_iter7_reg;
    grp_fu_873_p_opcode <= ap_const_lv5_2;
    grp_fu_877_p_ce <= ap_const_logic_1;
    grp_fu_877_p_din0 <= select_ln2860_2_reg_1428;
    grp_fu_877_p_din1 <= x_load_3_reg_1407_pp0_iter9_reg;
    grp_fu_877_p_opcode <= ap_const_lv5_2;
    h_mid227_fu_401_p3 <= 
        ap_const_lv5_0 when (icmp_ln2850_reg_1287(0) = '1') else 
        h_fu_92;
    icmp_ln2848_fu_215_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten83_load = ap_const_lv10_310) else "0";
    icmp_ln2850_fu_230_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C4) else "0";
    icmp_ln2852_fu_525_p2 <= "1" when (unsigned(w_fu_88) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln2852_mid282_fu_531_p2 <= (icmp_ln2852_fu_525_p2 or icmp_ln2850_reg_1287);
    icmp_ln2860_10_fu_1190_p2 <= "0" when (tmp_8_fu_1159_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_11_fu_1196_p2 <= "1" when (trunc_ln2860_5_fu_1169_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_12_fu_1208_p2 <= "0" when (tmp_9_fu_1176_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_13_fu_1214_p2 <= "1" when (trunc_ln2860_6_fu_1186_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_1_fu_955_p2 <= "1" when (trunc_ln2860_fu_945_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_2_fu_1014_p2 <= "0" when (tmp_2_fu_983_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_3_fu_1020_p2 <= "1" when (trunc_ln2860_1_fu_993_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_4_fu_1032_p2 <= "0" when (tmp_3_fu_1000_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_5_fu_1038_p2 <= "1" when (trunc_ln2860_2_fu_1010_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_6_fu_1102_p2 <= "0" when (tmp_5_fu_1071_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_7_fu_1108_p2 <= "1" when (trunc_ln2860_3_fu_1081_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_8_fu_1120_p2 <= "0" when (tmp_6_fu_1088_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_9_fu_1126_p2 <= "1" when (trunc_ln2860_4_fu_1098_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_fu_949_p2 <= "0" when (tmp_fu_935_p4 = ap_const_lv8_FF) else "1";
    or_ln2860_1_fu_902_p2 <= (ap_const_lv12_1 or add_ln2860_1_fu_891_p2);
    or_ln2860_2_fu_961_p2 <= (icmp_ln2860_fu_949_p2 or icmp_ln2860_1_fu_955_p2);
    or_ln2860_3_fu_1026_p2 <= (icmp_ln2860_3_fu_1020_p2 or icmp_ln2860_2_fu_1014_p2);
    or_ln2860_4_fu_1044_p2 <= (icmp_ln2860_5_fu_1038_p2 or icmp_ln2860_4_fu_1032_p2);
    or_ln2860_5_fu_1114_p2 <= (icmp_ln2860_7_fu_1108_p2 or icmp_ln2860_6_fu_1102_p2);
    or_ln2860_6_fu_1132_p2 <= (icmp_ln2860_9_fu_1126_p2 or icmp_ln2860_8_fu_1120_p2);
    or_ln2860_7_fu_1202_p2 <= (icmp_ln2860_11_fu_1196_p2 or icmp_ln2860_10_fu_1190_p2);
    or_ln2860_8_fu_1220_p2 <= (icmp_ln2860_13_fu_1214_p2 or icmp_ln2860_12_fu_1208_p2);
    or_ln2860_fu_880_p2 <= (ap_const_lv12_1 or add_ln2860_fu_869_p2);
    p_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_332_p4),7));
    p_cast_mid1_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_561_p4),7));
    p_mid110_fu_605_p2 <= std_logic_vector(unsigned(p_shl4_mid1_fu_585_p3) - unsigned(p_shl5_cast_mid1_fu_601_p1));
    p_mid112_fu_611_p2 <= std_logic_vector(unsigned(zext_ln2850_1_fu_557_p1) + unsigned(p_mid230_fu_449_p3));
    p_mid114_fu_811_p2 <= std_logic_vector(unsigned(p_shl8_mid1_fu_793_p3) - unsigned(p_shl9_cast_mid1_fu_807_p1));
    p_mid116_fu_824_p2 <= (p_mid112_reg_1350 or ap_const_lv8_1);
    p_mid118_fu_853_p2 <= std_logic_vector(unsigned(p_shl6_mid1_fu_833_p3) - unsigned(p_shl7_cast_mid1_fu_849_p1));
    p_mid129_fu_443_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_427_p1) - unsigned(p_shl3_cast_mid1_fu_439_p1));
    p_mid131_fu_478_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_464_p1) - unsigned(p_shl1_cast_mid1_fu_474_p1));
    p_mid151_fu_515_p2 <= std_logic_vector(unsigned(p_shl4_mid_fu_495_p3) - unsigned(p_shl5_cast_mid149_fu_511_p1));
    p_mid165_fu_732_p2 <= std_logic_vector(unsigned(p_shl8_mid_fu_714_p3) - unsigned(p_shl9_cast_mid163_fu_728_p1));
    p_mid167_fu_745_p2 <= (p_mid129_reg_1316 or ap_const_lv8_1);
    p_mid179_fu_774_p2 <= std_logic_vector(unsigned(p_shl6_mid_fu_754_p3) - unsigned(p_shl7_cast_mid177_fu_770_p1));
    p_mid18_fu_575_p2 <= std_logic_vector(unsigned(p_cast_mid1_fu_571_p1) + unsigned(p_mid232_fu_484_p3));
    p_mid1_fu_561_p4 <= add_ln2850_fu_543_p2(4 downto 1);
    p_mid230_fu_449_p3 <= 
        p_mid129_fu_443_p2 when (icmp_ln2850_reg_1287(0) = '1') else 
        empty_21_fu_294_p2;
    p_mid232_fu_484_p3 <= 
        p_mid131_fu_478_p2 when (icmp_ln2850_reg_1287(0) = '1') else 
        empty_23_fu_322_p2;
    p_mid252_fu_709_p3 <= 
        p_mid151_reg_1322 when (icmp_ln2850_reg_1287_pp0_iter1_reg(0) = '1') else 
        empty_26_reg_1300;
    p_mid266_fu_738_p3 <= 
        p_mid165_fu_732_p2 when (icmp_ln2850_reg_1287_pp0_iter1_reg(0) = '1') else 
        empty_29_fu_668_p2;
    p_mid280_fu_780_p3 <= 
        p_mid179_fu_774_p2 when (icmp_ln2850_reg_1287_pp0_iter1_reg(0) = '1') else 
        empty_32_fu_703_p2;
    p_shl1_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_fu_312_p2),7));
    p_shl1_cast_mid1_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_468_p2),7));
    p_shl2_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_270_p3),8));
    p_shl2_cast_mid1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_419_p3),8));
    p_shl2_fu_270_p3 <= (empty_fu_266_p1 & ap_const_lv5_0);
    p_shl2_mid1_fu_419_p3 <= (empty_34_fu_415_p1 & ap_const_lv5_0);
    p_shl3_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_282_p3),8));
    p_shl3_cast_mid1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_mid1_fu_431_p3),8));
    p_shl3_fu_282_p3 <= (empty_fu_266_p1 & ap_const_lv2_0);
    p_shl3_mid1_fu_431_p3 <= (empty_34_fu_415_p1 & ap_const_lv2_0);
    p_shl4_fu_356_p3 <= (empty_25_fu_352_p1 & ap_const_lv4_0);
    p_shl4_mid1_fu_585_p3 <= (empty_39_fu_581_p1 & ap_const_lv4_0);
    p_shl4_mid_fu_495_p3 <= (empty_36_fu_491_p1 & ap_const_lv4_0);
        p_shl5_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_fu_364_p3),10));

        p_shl5_cast_mid149_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_mid_fu_503_p3),10));

        p_shl5_cast_mid1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_mid1_fu_593_p3),10));

    p_shl5_fu_364_p3 <= (empty_24_fu_346_p2 & ap_const_lv1_0);
    p_shl5_mid1_fu_593_p3 <= (p_mid18_fu_575_p2 & ap_const_lv1_0);
    p_shl5_mid_fu_503_p3 <= (p_mid131_fu_478_p2 & ap_const_lv1_0);
    p_shl6_fu_683_p3 <= (empty_31_fu_679_p1 & ap_const_lv5_0);
    p_shl6_mid1_fu_833_p3 <= (empty_41_fu_829_p1 & ap_const_lv5_0);
    p_shl6_mid_fu_754_p3 <= (empty_38_fu_750_p1 & ap_const_lv5_0);
        p_shl7_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_691_p3),12));

        p_shl7_cast_mid177_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_mid_fu_762_p3),12));

        p_shl7_cast_mid1_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_mid1_fu_841_p3),12));

    p_shl7_fu_691_p3 <= (empty_30_fu_674_p2 & ap_const_lv2_0);
    p_shl7_mid1_fu_841_p3 <= (p_mid116_fu_824_p2 & ap_const_lv2_0);
    p_shl7_mid_fu_762_p3 <= (p_mid167_fu_745_p2 & ap_const_lv2_0);
    p_shl8_fu_650_p3 <= (empty_28_reg_1311 & ap_const_lv5_0);
    p_shl8_mid1_fu_793_p3 <= (empty_40_reg_1356 & ap_const_lv5_0);
    p_shl8_mid_fu_714_p3 <= (empty_37_reg_1327 & ap_const_lv5_0);
        p_shl9_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_fu_657_p3),12));

        p_shl9_cast_mid163_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_mid_fu_721_p3),12));

        p_shl9_cast_mid1_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_mid1_fu_800_p3),12));

    p_shl9_fu_657_p3 <= (empty_27_reg_1305 & ap_const_lv2_0);
    p_shl9_mid1_fu_800_p3 <= (p_mid112_reg_1350 & ap_const_lv2_0);
    p_shl9_mid_fu_721_p3 <= (p_mid129_reg_1316 & ap_const_lv2_0);
    p_shl_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_300_p3),7));
    p_shl_cast_mid1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_456_p3),7));
    p_shl_fu_300_p3 <= (empty_fu_266_p1 & ap_const_lv4_0);
    p_shl_mid1_fu_456_p3 <= (empty_34_fu_415_p1 & ap_const_lv4_0);
    select_ln2848_fu_536_p3 <= 
        add_ln2848_fu_395_p2 when (icmp_ln2850_reg_1287(0) = '1') else 
        ch_fu_100;
    select_ln2850_1_fu_787_p3 <= 
        p_mid252_fu_709_p3 when (icmp_ln2852_mid282_reg_1332(0) = '1') else 
        p_mid110_reg_1345;
    select_ln2850_2_fu_817_p3 <= 
        p_mid266_fu_738_p3 when (icmp_ln2852_mid282_reg_1332(0) = '1') else 
        p_mid114_fu_811_p2;
    select_ln2850_3_fu_859_p3 <= 
        p_mid280_fu_780_p3 when (icmp_ln2852_mid282_reg_1332(0) = '1') else 
        p_mid118_fu_853_p2;
    select_ln2850_4_fu_621_p3 <= 
        h_mid227_fu_401_p3 when (icmp_ln2852_mid282_fu_531_p2(0) = '1') else 
        add_ln2850_fu_543_p2;
    select_ln2850_5_fu_242_p3 <= 
        ap_const_lv8_1 when (icmp_ln2850_fu_230_p2(0) = '1') else 
        add_ln2850_1_fu_236_p2;
    select_ln2850_fu_549_p3 <= 
        w_mid228_fu_408_p3 when (icmp_ln2852_mid282_fu_531_p2(0) = '1') else 
        ap_const_lv5_0;
    select_ln2860_1_fu_1062_p3 <= 
        select_ln2860_reg_1414_pp0_iter6_reg when (and_ln2860_2_fu_1056_p2(0) = '1') else 
        x_load_1_reg_1393_pp0_iter6_reg;
    select_ln2860_2_fu_1150_p3 <= 
        select_ln2860_1_reg_1421_pp0_iter8_reg when (and_ln2860_4_fu_1144_p2(0) = '1') else 
        x_load_2_reg_1400_pp0_iter8_reg;
    select_ln2860_3_fu_1238_p3 <= 
        select_ln2860_2_reg_1428_pp0_iter10_reg when (and_ln2860_6_fu_1232_p2(0) = '1') else 
        x_load_3_reg_1407_pp0_iter10_reg;
    select_ln2860_fu_973_p3 <= 
        ap_const_lv32_FF7FFFFF when (and_ln2860_fu_967_p2(0) = '1') else 
        x_load_reg_1386_pp0_iter4_reg;
    tmp_10_fu_332_p4 <= h_fu_92(4 downto 1);
    tmp_11_fu_913_p4 <= select_ln2850_reg_1339(4 downto 1);
    tmp_2_fu_983_p4 <= bitcast_ln2860_1_fu_980_p1(30 downto 23);
    tmp_3_fu_1000_p4 <= bitcast_ln2860_2_fu_997_p1(30 downto 23);
    tmp_5_fu_1071_p4 <= bitcast_ln2860_3_fu_1068_p1(30 downto 23);
    tmp_6_fu_1088_p4 <= bitcast_ln2860_4_fu_1085_p1(30 downto 23);
    tmp_8_fu_1159_p4 <= bitcast_ln2860_5_fu_1156_p1(30 downto 23);
    tmp_9_fu_1176_p4 <= bitcast_ln2860_6_fu_1173_p1(30 downto 23);
    tmp_fu_935_p4 <= bitcast_ln2860_fu_932_p1(30 downto 23);
    trunc_ln2860_1_fu_993_p1 <= bitcast_ln2860_1_fu_980_p1(23 - 1 downto 0);
    trunc_ln2860_2_fu_1010_p1 <= bitcast_ln2860_2_fu_997_p1(23 - 1 downto 0);
    trunc_ln2860_3_fu_1081_p1 <= bitcast_ln2860_3_fu_1068_p1(23 - 1 downto 0);
    trunc_ln2860_4_fu_1098_p1 <= bitcast_ln2860_4_fu_1085_p1(23 - 1 downto 0);
    trunc_ln2860_5_fu_1169_p1 <= bitcast_ln2860_5_fu_1156_p1(23 - 1 downto 0);
    trunc_ln2860_6_fu_1186_p1 <= bitcast_ln2860_6_fu_1173_p1(23 - 1 downto 0);
    trunc_ln2860_fu_945_p1 <= bitcast_ln2860_fu_932_p1(23 - 1 downto 0);
    w_cast10_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln2850_reg_1339),12));
    w_mid228_fu_408_p3 <= 
        ap_const_lv5_0 when (icmp_ln2850_reg_1287(0) = '1') else 
        w_fu_88;
    x_address0 <= zext_ln2860_3_fu_908_p1(12 - 1 downto 0);
    x_address1 <= zext_ln2860_2_fu_897_p1(12 - 1 downto 0);
    x_address2 <= zext_ln2860_1_fu_886_p1(12 - 1 downto 0);
    x_address3 <= zext_ln2860_fu_875_p1(12 - 1 downto 0);

    x_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            x_ce2 <= ap_const_logic_1;
        else 
            x_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            x_ce3 <= ap_const_logic_1;
        else 
            x_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= zext_ln2864_1_fu_1244_p1(10 - 1 downto 0);

    y_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= select_ln2860_3_reg_1435;

    y_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln2850_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2850_fu_543_p2),8));
    zext_ln2850_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_92),8));
    zext_ln2860_1_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2860_fu_880_p2),64));
    zext_ln2860_2_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2860_1_fu_891_p2),64));
    zext_ln2860_3_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2860_1_fu_902_p2),64));
    zext_ln2860_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2860_fu_869_p2),64));
    zext_ln2864_1_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2864_reg_1381_pp0_iter11_reg),64));
    zext_ln2864_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_913_p4),10));
end behav;

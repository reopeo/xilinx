-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_maxpool2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address2 : OUT STD_LOGIC_VECTOR (10 downto 0);
    x_ce2 : OUT STD_LOGIC;
    x_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address3 : OUT STD_LOGIC_VECTOR (10 downto 0);
    x_ce3 : OUT STD_LOGIC;
    x_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_853_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_853_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_853_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_853_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_853_p_ce : OUT STD_LOGIC;
    grp_fu_857_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_857_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_857_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_857_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_857_p_ce : OUT STD_LOGIC;
    grp_fu_861_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_861_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_861_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_861_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_861_p_ce : OUT STD_LOGIC;
    grp_fu_865_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_865_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_865_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_865_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_865_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_top_maxpool2d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FF7FFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111011111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_188 : STD_LOGIC_VECTOR (8 downto 0) := "110001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln2848_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal empty_43_fu_311_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_43_reg_1248 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_44_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_44_reg_1253 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_323_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_45_reg_1259 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln2848_reg_1264 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2850_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2850_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid129_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid129_reg_1275 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid145_fu_451_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid145_reg_1281 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_54_fu_457_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_54_reg_1286 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln2852_mid276_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2852_mid276_reg_1291 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln2850_fu_499_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2850_reg_1298 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid18_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid18_reg_1304 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_56_fu_531_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_56_reg_1309 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid112_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid112_reg_1314 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_57_fu_541_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_57_reg_1320 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln2864_fu_891_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2864_reg_1345_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal x_load_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_reg_1350_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_4_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_4_reg_1357_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_4_reg_1357_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_4_reg_1357_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_5_reg_1364_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_6_reg_1371_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_reg_1378_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_4_fu_1027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_4_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_4_reg_1385_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_5_fu_1115_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_5_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_5_reg_1392_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_6_fu_1203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln2860_6_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln2860_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln2860_4_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2860_5_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2860_6_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln2864_2_fu_1209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln2852_fu_553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_w_load : STD_LOGIC_VECTOR (3 downto 0);
    signal h_fu_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2850_9_fu_545_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_h_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln2850_10_fu_565_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln2848_fu_479_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_ch_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten77_fu_100 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2848_2_fu_333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten77_load : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_221_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_fu_225_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_38_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_253_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_261_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ch_cast_fu_217_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_275_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_fu_285_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_40_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_41_fu_289_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_42_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_fu_303_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast2_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln2850_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_39_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2848_fu_345_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_51_fu_369_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_mid1_fu_373_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_52_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_mid1_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_mid1_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_409_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_mid1_fu_417_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ch_cast_mid1_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid131_fu_421_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_53_fu_439_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_mid_fu_443_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast2_mid141_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln2852_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid227_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln2850_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln2850_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_fu_511_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast_mid1_fu_521_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid232_fu_427_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln2850_2_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid230_fu_401_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2850_2_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_fu_598_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_612_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_47_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_48_fu_627_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_fu_639_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_631_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_mid_fu_669_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_mid_fu_662_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_mid157_fu_676_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid159_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_46_fu_616_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid161_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_55_fu_698_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_mid_fu_710_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_mid_fu_702_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_mid171_fu_718_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid173_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_49_fu_651_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_mid1_fu_738_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast2_mid1_fu_735_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid110_fu_745_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid246_fu_657_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_mid1_fu_765_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_mid1_fu_758_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_mid1_fu_772_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid114_fu_776_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid260_fu_686_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid116_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_58_fu_794_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_mid1_fu_806_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_mid1_fu_798_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_mid1_fu_814_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid118_fu_818_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid274_fu_728_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln2850_7_fu_782_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_cast8_fu_831_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln2860_fu_834_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln2860_fu_845_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln2850_8_fu_824_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln2860_2_fu_856_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln2860_2_fu_867_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_878_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln2864_fu_887_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln2850_6_fu_751_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln2860_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_900_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_fu_910_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_14_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_9_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_7_fu_945_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_8_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_948_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_7_fu_958_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_16_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_15_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_965_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_8_fu_975_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_18_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_17_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_10_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_11_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_7_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_8_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_9_fu_1033_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_10_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1036_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_9_fu_1046_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_20_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_19_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1053_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_10_fu_1063_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_22_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_21_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_12_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_13_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_9_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_10_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln2860_11_fu_1121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln2860_12_fu_1138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_11_fu_1134_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_24_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_23_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1141_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2860_12_fu_1151_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln2860_26_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2860_25_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_14_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln2860_15_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_11_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2860_12_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ch_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ch_fu_96 <= select_ln2848_fu_479_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ch_fu_96 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    h_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    h_fu_88 <= select_ln2850_9_fu_545_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    h_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten77_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten77_fu_100 <= add_ln2848_2_fu_333_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten77_fu_100 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_92 <= select_ln2850_10_fu_565_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    w_fu_84 <= add_ln2852_fu_553_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    w_fu_84 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2848_reg_1264 = ap_const_lv1_0))) then
                add_ln2864_reg_1345 <= add_ln2864_fu_891_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln2864_reg_1345_pp0_iter10_reg <= add_ln2864_reg_1345_pp0_iter9_reg;
                add_ln2864_reg_1345_pp0_iter2_reg <= add_ln2864_reg_1345;
                add_ln2864_reg_1345_pp0_iter3_reg <= add_ln2864_reg_1345_pp0_iter2_reg;
                add_ln2864_reg_1345_pp0_iter4_reg <= add_ln2864_reg_1345_pp0_iter3_reg;
                add_ln2864_reg_1345_pp0_iter5_reg <= add_ln2864_reg_1345_pp0_iter4_reg;
                add_ln2864_reg_1345_pp0_iter6_reg <= add_ln2864_reg_1345_pp0_iter5_reg;
                add_ln2864_reg_1345_pp0_iter7_reg <= add_ln2864_reg_1345_pp0_iter6_reg;
                add_ln2864_reg_1345_pp0_iter8_reg <= add_ln2864_reg_1345_pp0_iter7_reg;
                add_ln2864_reg_1345_pp0_iter9_reg <= add_ln2864_reg_1345_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                select_ln2860_4_reg_1385 <= select_ln2860_4_fu_1027_p3;
                select_ln2860_4_reg_1385_pp0_iter7_reg <= select_ln2860_4_reg_1385;
                select_ln2860_5_reg_1392 <= select_ln2860_5_fu_1115_p3;
                select_ln2860_5_reg_1392_pp0_iter9_reg <= select_ln2860_5_reg_1392;
                select_ln2860_6_reg_1399 <= select_ln2860_6_fu_1203_p3;
                select_ln2860_reg_1378 <= select_ln2860_fu_938_p3;
                select_ln2860_reg_1378_pp0_iter5_reg <= select_ln2860_reg_1378;
                x_load_4_reg_1357_pp0_iter3_reg <= x_load_4_reg_1357;
                x_load_4_reg_1357_pp0_iter4_reg <= x_load_4_reg_1357_pp0_iter3_reg;
                x_load_4_reg_1357_pp0_iter5_reg <= x_load_4_reg_1357_pp0_iter4_reg;
                x_load_5_reg_1364_pp0_iter3_reg <= x_load_5_reg_1364;
                x_load_5_reg_1364_pp0_iter4_reg <= x_load_5_reg_1364_pp0_iter3_reg;
                x_load_5_reg_1364_pp0_iter5_reg <= x_load_5_reg_1364_pp0_iter4_reg;
                x_load_5_reg_1364_pp0_iter6_reg <= x_load_5_reg_1364_pp0_iter5_reg;
                x_load_5_reg_1364_pp0_iter7_reg <= x_load_5_reg_1364_pp0_iter6_reg;
                x_load_6_reg_1371_pp0_iter3_reg <= x_load_6_reg_1371;
                x_load_6_reg_1371_pp0_iter4_reg <= x_load_6_reg_1371_pp0_iter3_reg;
                x_load_6_reg_1371_pp0_iter5_reg <= x_load_6_reg_1371_pp0_iter4_reg;
                x_load_6_reg_1371_pp0_iter6_reg <= x_load_6_reg_1371_pp0_iter5_reg;
                x_load_6_reg_1371_pp0_iter7_reg <= x_load_6_reg_1371_pp0_iter6_reg;
                x_load_6_reg_1371_pp0_iter8_reg <= x_load_6_reg_1371_pp0_iter7_reg;
                x_load_6_reg_1371_pp0_iter9_reg <= x_load_6_reg_1371_pp0_iter8_reg;
                x_load_reg_1350_pp0_iter3_reg <= x_load_reg_1350;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_43_reg_1248 <= empty_43_fu_311_p2;
                empty_44_reg_1253 <= empty_44_fu_317_p2;
                empty_45_reg_1259 <= empty_45_fu_323_p1;
                icmp_ln2848_reg_1264 <= icmp_ln2848_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    empty_54_reg_1286(6 downto 1) <= empty_54_fu_457_p1(6 downto 1);
                empty_56_reg_1309 <= empty_56_fu_531_p1;
                empty_57_reg_1320 <= empty_57_fu_541_p1;
                icmp_ln2850_reg_1268 <= icmp_ln2850_fu_351_p2;
                icmp_ln2852_mid276_reg_1291 <= icmp_ln2852_mid276_fu_473_p2;
                p_mid112_reg_1314 <= p_mid112_fu_535_p2;
                    p_mid129_reg_1275(7 downto 1) <= p_mid129_fu_395_p2(7 downto 1);
                p_mid145_reg_1281 <= p_mid145_fu_451_p2;
                p_mid18_reg_1304 <= p_mid18_fu_525_p2;
                select_ln2850_reg_1298 <= select_ln2850_fu_499_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                x_load_4_reg_1357 <= x_q2;
                x_load_5_reg_1364 <= x_q1;
                x_load_6_reg_1371 <= x_q0;
                x_load_reg_1350 <= x_q3;
            end if;
        end if;
    end process;
    p_mid129_reg_1275(0) <= '0';
    empty_54_reg_1286(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln2848_2_fu_333_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten77_load) + unsigned(ap_const_lv9_1));
    add_ln2848_fu_345_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ch_2) + unsigned(ap_const_lv4_1));
    add_ln2850_2_fu_559_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln2850_fu_487_p2 <= std_logic_vector(unsigned(h_mid227_fu_357_p3) + unsigned(ap_const_lv4_2));
    add_ln2852_fu_553_p2 <= std_logic_vector(unsigned(select_ln2850_fu_499_p3) + unsigned(ap_const_lv4_2));
    add_ln2860_2_fu_856_p2 <= std_logic_vector(unsigned(select_ln2850_8_fu_824_p3) + unsigned(w_cast8_fu_831_p1));
    add_ln2860_fu_834_p2 <= std_logic_vector(unsigned(select_ln2850_7_fu_782_p3) + unsigned(w_cast8_fu_831_p1));
    add_ln2864_fu_891_p2 <= std_logic_vector(unsigned(zext_ln2864_fu_887_p1) + unsigned(select_ln2850_6_fu_751_p3));
    and_ln2860_10_fu_1109_p2 <= (grp_fu_861_p_dout0 and and_ln2860_9_fu_1103_p2);
    and_ln2860_11_fu_1191_p2 <= (or_ln2860_15_fu_1185_p2 and or_ln2860_14_fu_1167_p2);
    and_ln2860_12_fu_1197_p2 <= (grp_fu_865_p_dout0 and and_ln2860_11_fu_1191_p2);
    and_ln2860_7_fu_1015_p2 <= (or_ln2860_11_fu_1009_p2 and or_ln2860_10_fu_991_p2);
    and_ln2860_8_fu_1021_p2 <= (grp_fu_857_p_dout0 and and_ln2860_7_fu_1015_p2);
    and_ln2860_9_fu_1103_p2 <= (or_ln2860_13_fu_1097_p2 and or_ln2860_12_fu_1079_p2);
    and_ln2860_fu_932_p2 <= (or_ln2860_9_fu_926_p2 and grp_fu_853_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln2848_fu_327_p2)
    begin
        if (((icmp_ln2848_fu_327_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln2848_reg_1264)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln2848_reg_1264 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ch_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ch_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ch_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_ch_2 <= ch_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_h_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, h_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_h_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_h_2 <= h_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten77_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten77_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten77_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten77_load <= indvar_flatten77_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_w_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, w_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_w_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_w_load <= w_fu_84;
        end if; 
    end process;

    bitcast_ln2860_10_fu_1050_p1 <= x_load_5_reg_1364_pp0_iter7_reg;
    bitcast_ln2860_11_fu_1121_p1 <= select_ln2860_5_reg_1392_pp0_iter9_reg;
    bitcast_ln2860_12_fu_1138_p1 <= x_load_6_reg_1371_pp0_iter9_reg;
    bitcast_ln2860_7_fu_945_p1 <= select_ln2860_reg_1378_pp0_iter5_reg;
    bitcast_ln2860_8_fu_962_p1 <= x_load_4_reg_1357_pp0_iter5_reg;
    bitcast_ln2860_9_fu_1033_p1 <= select_ln2860_4_reg_1385_pp0_iter7_reg;
    bitcast_ln2860_fu_897_p1 <= x_load_reg_1350_pp0_iter3_reg;
    ch_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_ch_2),7));
    ch_cast_mid1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2848_fu_345_p2),7));
    empty_38_fu_237_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_ch_2),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    empty_39_fu_247_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_233_p1) - unsigned(p_shl2_cast_fu_243_p1));
    empty_40_fu_265_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_261_p1) - unsigned(ch_cast_fu_217_p1));
    empty_41_fu_289_p2 <= std_logic_vector(unsigned(p_cast_fu_285_p1) + unsigned(empty_40_fu_265_p2));
    empty_42_fu_299_p1 <= empty_41_fu_289_p2(6 - 1 downto 0);
    empty_43_fu_311_p2 <= std_logic_vector(unsigned(p_shl3_fu_303_p3) - unsigned(p_cast2_fu_295_p1));
    empty_44_fu_317_p2 <= std_logic_vector(unsigned(zext_ln2850_fu_271_p1) + unsigned(empty_39_fu_247_p2));
    empty_45_fu_323_p1 <= empty_44_fu_317_p2(7 - 1 downto 0);
    empty_46_fu_616_p2 <= std_logic_vector(unsigned(p_shl6_fu_598_p3) - unsigned(p_shl7_cast_fu_612_p1));
    empty_47_fu_622_p2 <= (empty_44_reg_1253 or ap_const_lv8_1);
    empty_48_fu_627_p1 <= empty_47_fu_622_p2(7 - 1 downto 0);
    empty_49_fu_651_p2 <= std_logic_vector(unsigned(p_shl4_fu_631_p3) - unsigned(p_shl5_cast_fu_647_p1));
    empty_51_fu_369_p1 <= add_ln2848_fu_345_p2(3 - 1 downto 0);
    empty_52_fu_385_p2 <= std_logic_vector(shift_left(unsigned(add_ln2848_fu_345_p2),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    empty_53_fu_439_p1 <= p_mid131_fu_421_p2(6 - 1 downto 0);
    empty_54_fu_457_p1 <= p_mid129_fu_395_p2(7 - 1 downto 0);
    empty_55_fu_698_p1 <= p_mid161_fu_693_p2(7 - 1 downto 0);
    empty_56_fu_531_p1 <= p_mid18_fu_525_p2(6 - 1 downto 0);
    empty_57_fu_541_p1 <= p_mid112_fu_535_p2(7 - 1 downto 0);
    empty_58_fu_794_p1 <= p_mid116_fu_789_p2(7 - 1 downto 0);
    empty_fu_221_p1 <= ap_sig_allocacmp_ch_2(3 - 1 downto 0);
    grp_fu_853_p_ce <= ap_const_logic_1;
    grp_fu_853_p_din0 <= x_load_reg_1350;
    grp_fu_853_p_din1 <= ap_const_lv32_FF7FFFFF;
    grp_fu_853_p_opcode <= ap_const_lv5_4;
    grp_fu_857_p_ce <= ap_const_logic_1;
    grp_fu_857_p_din0 <= select_ln2860_reg_1378;
    grp_fu_857_p_din1 <= x_load_4_reg_1357_pp0_iter4_reg;
    grp_fu_857_p_opcode <= ap_const_lv5_2;
    grp_fu_861_p_ce <= ap_const_logic_1;
    grp_fu_861_p_din0 <= select_ln2860_4_reg_1385;
    grp_fu_861_p_din1 <= x_load_5_reg_1364_pp0_iter6_reg;
    grp_fu_861_p_opcode <= ap_const_lv5_2;
    grp_fu_865_p_ce <= ap_const_logic_1;
    grp_fu_865_p_din0 <= select_ln2860_5_reg_1392;
    grp_fu_865_p_din1 <= x_load_6_reg_1371_pp0_iter8_reg;
    grp_fu_865_p_opcode <= ap_const_lv5_2;
    h_mid227_fu_357_p3 <= 
        ap_const_lv4_0 when (icmp_ln2850_fu_351_p2(0) = '1') else 
        ap_sig_allocacmp_h_2;
    icmp_ln2848_fu_327_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten77_load = ap_const_lv9_188) else "0";
    icmp_ln2850_fu_351_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_31) else "0";
    icmp_ln2852_fu_467_p2 <= "1" when (ap_sig_allocacmp_w_load = ap_const_lv4_E) else "0";
    icmp_ln2852_mid276_fu_473_p2 <= (not_exitcond_flatten_fu_461_p2 and icmp_ln2852_fu_467_p2);
    icmp_ln2860_14_fu_920_p2 <= "1" when (trunc_ln2860_fu_910_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_15_fu_979_p2 <= "0" when (tmp_1_fu_948_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_16_fu_985_p2 <= "1" when (trunc_ln2860_7_fu_958_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_17_fu_997_p2 <= "0" when (tmp_2_fu_965_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_18_fu_1003_p2 <= "1" when (trunc_ln2860_8_fu_975_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_19_fu_1067_p2 <= "0" when (tmp_4_fu_1036_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_20_fu_1073_p2 <= "1" when (trunc_ln2860_9_fu_1046_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_21_fu_1085_p2 <= "0" when (tmp_5_fu_1053_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_22_fu_1091_p2 <= "1" when (trunc_ln2860_10_fu_1063_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_23_fu_1155_p2 <= "0" when (tmp_7_fu_1124_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_24_fu_1161_p2 <= "1" when (trunc_ln2860_11_fu_1134_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_25_fu_1173_p2 <= "0" when (tmp_8_fu_1141_p4 = ap_const_lv8_FF) else "1";
    icmp_ln2860_26_fu_1179_p2 <= "1" when (trunc_ln2860_12_fu_1151_p1 = ap_const_lv23_0) else "0";
    icmp_ln2860_fu_914_p2 <= "0" when (tmp_fu_900_p4 = ap_const_lv8_FF) else "1";
    not_exitcond_flatten_fu_461_p2 <= (icmp_ln2850_fu_351_p2 xor ap_const_lv1_1);
    or_ln2850_fu_493_p2 <= (icmp_ln2852_mid276_fu_473_p2 or icmp_ln2850_fu_351_p2);
    or_ln2860_10_fu_991_p2 <= (icmp_ln2860_16_fu_985_p2 or icmp_ln2860_15_fu_979_p2);
    or_ln2860_11_fu_1009_p2 <= (icmp_ln2860_18_fu_1003_p2 or icmp_ln2860_17_fu_997_p2);
    or_ln2860_12_fu_1079_p2 <= (icmp_ln2860_20_fu_1073_p2 or icmp_ln2860_19_fu_1067_p2);
    or_ln2860_13_fu_1097_p2 <= (icmp_ln2860_22_fu_1091_p2 or icmp_ln2860_21_fu_1085_p2);
    or_ln2860_14_fu_1167_p2 <= (icmp_ln2860_24_fu_1161_p2 or icmp_ln2860_23_fu_1155_p2);
    or_ln2860_15_fu_1185_p2 <= (icmp_ln2860_26_fu_1179_p2 or icmp_ln2860_25_fu_1173_p2);
    or_ln2860_2_fu_867_p2 <= (ap_const_lv11_1 or add_ln2860_2_fu_856_p2);
    or_ln2860_9_fu_926_p2 <= (icmp_ln2860_fu_914_p2 or icmp_ln2860_14_fu_920_p2);
    or_ln2860_fu_845_p2 <= (ap_const_lv11_1 or add_ln2860_fu_834_p2);
        p_cast2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_41_fu_289_p2),9));

        p_cast2_mid141_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid131_fu_421_p2),9));

        p_cast2_mid1_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid18_reg_1304),9));

    p_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_275_p4),7));
    p_cast_mid1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_511_p4),7));
    p_mid110_fu_745_p2 <= std_logic_vector(unsigned(p_shl3_mid1_fu_738_p3) - unsigned(p_cast2_mid1_fu_735_p1));
    p_mid112_fu_535_p2 <= std_logic_vector(unsigned(zext_ln2850_2_fu_507_p1) + unsigned(p_mid230_fu_401_p3));
    p_mid114_fu_776_p2 <= std_logic_vector(unsigned(p_shl6_mid1_fu_758_p3) - unsigned(p_shl7_cast_mid1_fu_772_p1));
    p_mid116_fu_789_p2 <= (p_mid112_reg_1314 or ap_const_lv8_1);
    p_mid118_fu_818_p2 <= std_logic_vector(unsigned(p_shl4_mid1_fu_798_p3) - unsigned(p_shl5_cast_mid1_fu_814_p1));
    p_mid129_fu_395_p2 <= std_logic_vector(unsigned(p_shl1_cast_mid1_fu_381_p1) - unsigned(p_shl2_cast_mid1_fu_391_p1));
    p_mid131_fu_421_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_417_p1) - unsigned(ch_cast_mid1_fu_365_p1));
    p_mid145_fu_451_p2 <= std_logic_vector(unsigned(p_shl3_mid_fu_443_p3) - unsigned(p_cast2_mid141_fu_435_p1));
    p_mid159_fu_680_p2 <= std_logic_vector(unsigned(p_shl6_mid_fu_662_p3) - unsigned(p_shl7_cast_mid157_fu_676_p1));
    p_mid161_fu_693_p2 <= (p_mid129_reg_1275 or ap_const_lv8_1);
    p_mid173_fu_722_p2 <= std_logic_vector(unsigned(p_shl4_mid_fu_702_p3) - unsigned(p_shl5_cast_mid171_fu_718_p1));
    p_mid18_fu_525_p2 <= std_logic_vector(unsigned(p_cast_mid1_fu_521_p1) + unsigned(p_mid232_fu_427_p3));
    p_mid1_fu_511_p4 <= add_ln2850_fu_487_p2(3 downto 1);
    p_mid230_fu_401_p3 <= 
        p_mid129_fu_395_p2 when (icmp_ln2850_fu_351_p2(0) = '1') else 
        empty_39_fu_247_p2;
    p_mid232_fu_427_p3 <= 
        p_mid131_fu_421_p2 when (icmp_ln2850_fu_351_p2(0) = '1') else 
        empty_40_fu_265_p2;
    p_mid246_fu_657_p3 <= 
        p_mid145_reg_1281 when (icmp_ln2850_reg_1268(0) = '1') else 
        empty_43_reg_1248;
    p_mid260_fu_686_p3 <= 
        p_mid159_fu_680_p2 when (icmp_ln2850_reg_1268(0) = '1') else 
        empty_46_fu_616_p2;
    p_mid274_fu_728_p3 <= 
        p_mid173_fu_722_p2 when (icmp_ln2850_reg_1268(0) = '1') else 
        empty_49_fu_651_p2;
    p_shl1_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_225_p3),8));
    p_shl1_cast_mid1_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_373_p3),8));
    p_shl1_fu_225_p3 <= (empty_fu_221_p1 & ap_const_lv4_0);
    p_shl1_mid1_fu_373_p3 <= (empty_51_fu_369_p1 & ap_const_lv4_0);
    p_shl2_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_38_fu_237_p2),8));
    p_shl2_cast_mid1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_52_fu_385_p2),8));
    p_shl3_fu_303_p3 <= (empty_42_fu_299_p1 & ap_const_lv3_0);
    p_shl3_mid1_fu_738_p3 <= (empty_56_reg_1309 & ap_const_lv3_0);
    p_shl3_mid_fu_443_p3 <= (empty_53_fu_439_p1 & ap_const_lv3_0);
    p_shl4_fu_631_p3 <= (empty_48_fu_627_p1 & ap_const_lv4_0);
    p_shl4_mid1_fu_798_p3 <= (empty_58_fu_794_p1 & ap_const_lv4_0);
    p_shl4_mid_fu_702_p3 <= (empty_55_fu_698_p1 & ap_const_lv4_0);
        p_shl5_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_fu_639_p3),11));

        p_shl5_cast_mid171_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_mid_fu_710_p3),11));

        p_shl5_cast_mid1_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl5_mid1_fu_806_p3),11));

    p_shl5_fu_639_p3 <= (empty_47_fu_622_p2 & ap_const_lv1_0);
    p_shl5_mid1_fu_806_p3 <= (p_mid116_fu_789_p2 & ap_const_lv1_0);
    p_shl5_mid_fu_710_p3 <= (p_mid161_fu_693_p2 & ap_const_lv1_0);
    p_shl6_fu_598_p3 <= (empty_45_reg_1259 & ap_const_lv4_0);
    p_shl6_mid1_fu_758_p3 <= (empty_57_reg_1320 & ap_const_lv4_0);
    p_shl6_mid_fu_662_p3 <= (empty_54_reg_1286 & ap_const_lv4_0);
        p_shl7_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_fu_605_p3),11));

        p_shl7_cast_mid157_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_mid_fu_669_p3),11));

        p_shl7_cast_mid1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl7_mid1_fu_765_p3),11));

    p_shl7_fu_605_p3 <= (empty_44_reg_1253 & ap_const_lv1_0);
    p_shl7_mid1_fu_765_p3 <= (p_mid112_reg_1314 & ap_const_lv1_0);
    p_shl7_mid_fu_669_p3 <= (p_mid129_reg_1275 & ap_const_lv1_0);
    p_shl_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_253_p3),7));
    p_shl_cast_mid1_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_409_p3),7));
    p_shl_fu_253_p3 <= (empty_fu_221_p1 & ap_const_lv3_0);
    p_shl_mid1_fu_409_p3 <= (empty_51_fu_369_p1 & ap_const_lv3_0);
    select_ln2848_fu_479_p3 <= 
        add_ln2848_fu_345_p2 when (icmp_ln2850_fu_351_p2(0) = '1') else 
        ap_sig_allocacmp_ch_2;
    select_ln2850_10_fu_565_p3 <= 
        ap_const_lv6_1 when (icmp_ln2850_fu_351_p2(0) = '1') else 
        add_ln2850_2_fu_559_p2;
    select_ln2850_6_fu_751_p3 <= 
        p_mid110_fu_745_p2 when (icmp_ln2852_mid276_reg_1291(0) = '1') else 
        p_mid246_fu_657_p3;
    select_ln2850_7_fu_782_p3 <= 
        p_mid114_fu_776_p2 when (icmp_ln2852_mid276_reg_1291(0) = '1') else 
        p_mid260_fu_686_p3;
    select_ln2850_8_fu_824_p3 <= 
        p_mid118_fu_818_p2 when (icmp_ln2852_mid276_reg_1291(0) = '1') else 
        p_mid274_fu_728_p3;
    select_ln2850_9_fu_545_p3 <= 
        add_ln2850_fu_487_p2 when (icmp_ln2852_mid276_fu_473_p2(0) = '1') else 
        h_mid227_fu_357_p3;
    select_ln2850_fu_499_p3 <= 
        ap_const_lv4_0 when (or_ln2850_fu_493_p2(0) = '1') else 
        ap_sig_allocacmp_w_load;
    select_ln2860_4_fu_1027_p3 <= 
        select_ln2860_reg_1378_pp0_iter5_reg when (and_ln2860_8_fu_1021_p2(0) = '1') else 
        x_load_4_reg_1357_pp0_iter5_reg;
    select_ln2860_5_fu_1115_p3 <= 
        select_ln2860_4_reg_1385_pp0_iter7_reg when (and_ln2860_10_fu_1109_p2(0) = '1') else 
        x_load_5_reg_1364_pp0_iter7_reg;
    select_ln2860_6_fu_1203_p3 <= 
        select_ln2860_5_reg_1392_pp0_iter9_reg when (and_ln2860_12_fu_1197_p2(0) = '1') else 
        x_load_6_reg_1371_pp0_iter9_reg;
    select_ln2860_fu_938_p3 <= 
        ap_const_lv32_FF7FFFFF when (and_ln2860_fu_932_p2(0) = '1') else 
        x_load_reg_1350_pp0_iter3_reg;
    tmp_12_fu_275_p4 <= ap_sig_allocacmp_h_2(3 downto 1);
    tmp_13_fu_878_p4 <= select_ln2850_reg_1298(3 downto 1);
    tmp_1_fu_948_p4 <= bitcast_ln2860_7_fu_945_p1(30 downto 23);
    tmp_2_fu_965_p4 <= bitcast_ln2860_8_fu_962_p1(30 downto 23);
    tmp_4_fu_1036_p4 <= bitcast_ln2860_9_fu_1033_p1(30 downto 23);
    tmp_5_fu_1053_p4 <= bitcast_ln2860_10_fu_1050_p1(30 downto 23);
    tmp_7_fu_1124_p4 <= bitcast_ln2860_11_fu_1121_p1(30 downto 23);
    tmp_8_fu_1141_p4 <= bitcast_ln2860_12_fu_1138_p1(30 downto 23);
    tmp_fu_900_p4 <= bitcast_ln2860_fu_897_p1(30 downto 23);
    trunc_ln2860_10_fu_1063_p1 <= bitcast_ln2860_10_fu_1050_p1(23 - 1 downto 0);
    trunc_ln2860_11_fu_1134_p1 <= bitcast_ln2860_11_fu_1121_p1(23 - 1 downto 0);
    trunc_ln2860_12_fu_1151_p1 <= bitcast_ln2860_12_fu_1138_p1(23 - 1 downto 0);
    trunc_ln2860_7_fu_958_p1 <= bitcast_ln2860_7_fu_945_p1(23 - 1 downto 0);
    trunc_ln2860_8_fu_975_p1 <= bitcast_ln2860_8_fu_962_p1(23 - 1 downto 0);
    trunc_ln2860_9_fu_1046_p1 <= bitcast_ln2860_9_fu_1033_p1(23 - 1 downto 0);
    trunc_ln2860_fu_910_p1 <= bitcast_ln2860_fu_897_p1(23 - 1 downto 0);
    w_cast8_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln2850_reg_1298),11));
    x_address0 <= zext_ln2860_6_fu_873_p1(11 - 1 downto 0);
    x_address1 <= zext_ln2860_5_fu_862_p1(11 - 1 downto 0);
    x_address2 <= zext_ln2860_4_fu_851_p1(11 - 1 downto 0);
    x_address3 <= zext_ln2860_fu_840_p1(11 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce2 <= ap_const_logic_1;
        else 
            x_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce3 <= ap_const_logic_1;
        else 
            x_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= zext_ln2864_2_fu_1209_p1(9 - 1 downto 0);

    y_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= select_ln2860_6_reg_1399;

    y_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln2850_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2850_fu_487_p2),8));
    zext_ln2850_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_h_2),8));
    zext_ln2860_4_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2860_fu_845_p2),64));
    zext_ln2860_5_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2860_2_fu_856_p2),64));
    zext_ln2860_6_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2860_2_fu_867_p2),64));
    zext_ln2860_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2860_fu_834_p2),64));
    zext_ln2864_2_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2864_reg_1345_pp0_iter10_reg),64));
    zext_ln2864_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_878_p4),9));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_VITIS_LOOP_2872_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vla1_i_address0,
        vla1_i_ce0,
        vla1_i_q0,
        vla42_i_address0,
        vla42_i_ce0,
        vla42_i_we0,
        vla42_i_d0,
        grp_fu_853_p_din0,
        grp_fu_853_p_din1,
        grp_fu_853_p_opcode,
        grp_fu_853_p_dout0,
        grp_fu_853_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] vla1_i_address0;
output   vla1_i_ce0;
input  [31:0] vla1_i_q0;
output  [11:0] vla42_i_address0;
output   vla42_i_ce0;
output   vla42_i_we0;
output  [31:0] vla42_i_d0;
output  [31:0] grp_fu_853_p_din0;
output  [31:0] grp_fu_853_p_din1;
output  [4:0] grp_fu_853_p_opcode;
input  [0:0] grp_fu_853_p_dout0;
output   grp_fu_853_p_ce;

reg ap_idle;
reg vla1_i_ce0;
reg vla42_i_ce0;
reg vla42_i_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln2872_fu_85_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast_fu_97_p1;
reg   [63:0] i_cast_reg_166;
reg   [63:0] i_cast_reg_166_pp0_iter1_reg;
reg   [63:0] i_cast_reg_166_pp0_iter2_reg;
reg   [63:0] i_cast_reg_166_pp0_iter3_reg;
reg   [31:0] vla1_i_load_reg_176;
reg   [31:0] vla1_i_load_reg_176_pp0_iter2_reg;
wire   [31:0] select_ln2874_fu_148_p3;
reg   [31:0] select_ln2874_reg_183;
wire    ap_block_pp0_stage0;
reg   [11:0] i_fu_42;
wire   [11:0] i_5_fu_91_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_4;
wire   [31:0] bitcast_ln2874_fu_107_p1;
wire   [7:0] tmp_fu_110_p4;
wire   [22:0] trunc_ln2874_fu_120_p1;
wire   [0:0] icmp_ln2874_1_fu_130_p2;
wire   [0:0] icmp_ln2874_fu_124_p2;
wire   [0:0] or_ln2874_fu_136_p2;
wire   [0:0] and_ln2874_fu_142_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln2872_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= i_5_fu_91_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_cast_reg_166_pp0_iter1_reg[11 : 0] <= i_cast_reg_166[11 : 0];
        vla1_i_load_reg_176 <= vla1_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        i_cast_reg_166_pp0_iter2_reg[11 : 0] <= i_cast_reg_166_pp0_iter1_reg[11 : 0];
        i_cast_reg_166_pp0_iter3_reg[11 : 0] <= i_cast_reg_166_pp0_iter2_reg[11 : 0];
        select_ln2874_reg_183 <= select_ln2874_fu_148_p3;
        vla1_i_load_reg_176_pp0_iter2_reg <= vla1_i_load_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2872_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_166[11 : 0] <= i_cast_fu_97_p1[11 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln2872_fu_85_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vla1_i_ce0 = 1'b1;
    end else begin
        vla1_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        vla42_i_ce0 = 1'b1;
    end else begin
        vla42_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        vla42_i_we0 = 1'b1;
    end else begin
        vla42_i_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln2874_fu_142_p2 = (or_ln2874_fu_136_p2 & grp_fu_853_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln2874_fu_107_p1 = vla1_i_load_reg_176_pp0_iter2_reg;

assign grp_fu_853_p_ce = 1'b1;

assign grp_fu_853_p_din0 = vla1_i_load_reg_176;

assign grp_fu_853_p_din1 = 32'd0;

assign grp_fu_853_p_opcode = 5'd2;

assign i_5_fu_91_p2 = (ap_sig_allocacmp_i_4 + 12'd1);

assign i_cast_fu_97_p1 = ap_sig_allocacmp_i_4;

assign icmp_ln2872_fu_85_p2 = ((ap_sig_allocacmp_i_4 == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln2874_1_fu_130_p2 = ((trunc_ln2874_fu_120_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln2874_fu_124_p2 = ((tmp_fu_110_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln2874_fu_136_p2 = (icmp_ln2874_fu_124_p2 | icmp_ln2874_1_fu_130_p2);

assign select_ln2874_fu_148_p3 = ((and_ln2874_fu_142_p2[0:0] == 1'b1) ? vla1_i_load_reg_176_pp0_iter2_reg : 32'd0);

assign tmp_fu_110_p4 = {{bitcast_ln2874_fu_107_p1[30:23]}};

assign trunc_ln2874_fu_120_p1 = bitcast_ln2874_fu_107_p1[22:0];

assign vla1_i_address0 = i_cast_fu_97_p1;

assign vla42_i_address0 = i_cast_reg_166_pp0_iter3_reg;

assign vla42_i_d0 = select_ln2874_reg_183;

always @ (posedge ap_clk) begin
    i_cast_reg_166[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_cast_reg_166_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_cast_reg_166_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_cast_reg_166_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //cnn_top_cnn_top_Pipeline_VITIS_LOOP_2872_1
